<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NULLNE</title><link>/</link><description></description><atom:link href="/feeds/nullne.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 22 Sep 2016 22:00:00 +0800</lastBuildDate><item><title>从北京逃离和灰溜溜的回来</title><link>/dear-diary/2016/run-away-from-Beijing.html</link><description>&lt;div id="pec-encrypted-content" style="display:none"&gt;UTBgaqmLWeIYos2BlLmToQ==;;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
&lt;div class="ui large brown message"&gt;
    &lt;i class="lock icon"&gt;&lt;/i&gt;
    This content is encrypted.
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="ui page dimmer" id="lock-lock"&gt;
    &lt;i class="big inverted remove link icon" style="position:fixed"&gt;&lt;/i&gt;
    &lt;div class=" content"&gt;
        &lt;form id="pec-decrypt-form" class="ui form" onsubmit="javascript:$('#pec-decrypt-content').click();return false;"&gt;
            &lt;div class="inline field"&gt;
                &lt;input id="pec-content-password" type="password"  placeholder="Password"&gt;
                &lt;button class="ui button" id="pec-decrypt-content" type="button"&gt;&lt;i class="unlock icon"&gt;&lt;/i&gt;Unlock&lt;/button&gt;
            &lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(document).ready(function(){
    $('#lock-lock').dimmer({
        opacity: 0.8,
        closable: false,
    });
    $('#lock-lock').dimmer('show');
    $('.remove.link.icon').click(function(){
        $('#lock-lock').dimmer('hide');
    })
});
&lt;/script&gt;


    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i-1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding});

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };

        var init_decryptor = function() {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            decrypt_btn.addEventListener('click', function () {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);
                    $('#lock-lock').dimmer('hide');

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
            });
        };

        document.addEventListener('DOMContentLoaded', init_decryptor);
    })();
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Thu, 22 Sep 2016 22:00:00 +0800</pubDate><guid>tag:,2016-09-22:dear-diary/2016/run-away-from-Beijing.html</guid><category>work</category></item><item><title>Ingress -- 七天升八小记</title><link>/suo-sui/2016/ingress.html</link><description>&lt;p&gt;还是从Pokemon Go说起吧，一夜之间这个游戏火遍全球，所有人跃跃欲试。然而大陆，除了个别几个漏网之‘鱼’，其他所有的地方都不能愉快的玩耍，所以师出同门的Ingress又引起了我的兴趣。很久很久大概是12年的时候吧，Ingress出来也没多久，注册玩过几天。但是周围玩的人少之又少，这种社交性极强的游戏一个人玩太寂寞了，所以没多久就搁在一边了。&lt;/p&gt;
&lt;p&gt;可能是因为厦门玩家热情高涨吧（刚玩没多久就被邀请进群，然后各种手把手教学），所以怒下决心七天之内升到八级，八级才是这个游戏的开始好么。我就不用那么高深的行话了，当初这些行话让我云里雾里，还去知乎看了一篇Ingress 行话扫盲贴。&lt;/p&gt;
&lt;h3&gt;Day 1 -- 初见&lt;/h3&gt;
&lt;p&gt;找了好久终于找到当初用来注册游戏的账号了，主要是不想换ID，@nullne，见ID如见其人。今天主要熟悉了一下游戏操作，hack附近的几个Portal，轻松两级。晚上回来加群，查攻略。了解这些概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两大阵营Resistance Enlightened&lt;/li&gt;
&lt;li&gt;简单的术语 XM, Portal, Link, Field&lt;/li&gt;
&lt;li&gt;基本操作 Hack, Deploy, Recharge, Link&lt;/li&gt;
&lt;li&gt;基本物品如Power Cube, Burster, Portal Key, Resonator&lt;/li&gt;
&lt;li&gt;多重Field&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Day 2 -- SM和文化宫&lt;/h3&gt;
&lt;p&gt;昨晚临睡的时候看了Misson这个概念，中午吃完饭没事就去SM做了第一个任务，附带练习多重Field。任务其实蛮简单的，就是按照地图指引把所有的Portal Hack一遍（后来在搜索如何制作任务的时候才知道任务的更多有意思的玩法）。当时SM附近的Portal级别还挺高的，我都只是Hack并不去Fire。尽管如此经验也蹭蹭蹭的涨，做做任务把旁边的Portal顺带Hack 一下，快三级了。&lt;/p&gt;
&lt;p&gt;晚上去文化宫，纯碎是因为FS Amoy 那个任务牌子不能更好看。文化宫周围的Potal密集程度令人咋舌，太恐怖了，密密麻麻，于是跟中午一样，边做任务边顺手摸瓜，一直玩到手机没电。安利一下文化宫对面有一家嘿小面，毛肚火锅米线太好吃太好吃了，之后来这儿刷经验有一大半都是因为馋了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mission-amoy" src="/photos/ingress/mission-amoya.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;Day 3 -- 五缘湾&lt;/h3&gt;
&lt;p&gt;昨晚在Intel（Niantic 自家出的地图，其实挺好用的）上规划了一下就来五缘湾战斗了。来了之后才发现五缘湾附近的Portal一个个相距太远，当初在地图上看的时候没有注意比例尺（所以比例尺一定要看！！），结果导致从一个Portal走到下一个需要好久好久，后来误入湿地公园，大半夜在木栈迷宫出不来了。晚上回来腿上密密麻麻都是蚊子的吻痕。你猜怎么着，某一个瞬间我竟然打算在腿上上练习多重Field。。。
经验不多但是没有白走，拿到了第一个牌子，10KM，这也是之后刻意刷牌子的开始。&lt;/p&gt;
&lt;p&gt;晚上回来用Agent report 记录了一下，快30W经验&lt;/p&gt;
&lt;h3&gt;Day 4 -- 湖里公园&lt;/h3&gt;
&lt;p&gt;今天应该是学以致用的一天。&lt;/p&gt;
&lt;p&gt;昨晚精心选址在湖里公园 -- 附近portal相对比较密集，但也不会像文化宫那么复杂以至于新手看不清楚，并且在茂密的公园里面挺凉快的。&lt;/p&gt;
&lt;p&gt;果然今天的战斗非常轻松愉快，除了Key老是不够用，那些说Multi-hack的是因为你们攒了很多Mod了好么，新手囊中羞涩只能来来回回拼人品。末了有一个彩蛋，在去公园附近的游乐场里面的几个Portal的时候发现里面正在施工，在这儿寻找Portal感觉就像是大片里面的特工在废墟里面执行任务，代入感太强了，AR类游戏的最高境界不过如此吧。&lt;/p&gt;
&lt;p&gt;As always, 战斗到手机没电收工，差不多7级了。&lt;/p&gt;
&lt;h3&gt;Day 5 -- 游戏内外&lt;/h3&gt;
&lt;p&gt;昨天@Aldebaran11  看我之前在文化宫附近刷说要送我一桶Key，然后我们就约在母爱那个portal附近。到了之后发现是两个美腻的妹子和两个呆萌的汉子。之前在文化宫也碰到了一个蓝军的妹子@yanoyanoko，就像是在游戏里面遇见了，只讨论游戏不玩其他，中二到了极点。&lt;/p&gt;
&lt;p&gt;大佬（我发现这儿的人们管大神叫大佬？）们提前做好了规划图（膜拜学霸状）。然后Gnostikoi 和@Aldebaran11 分头去做两个多重的底边， 另一个妹子专门过来做FS Amoy 那个任务，@bosonfields 是萌新，跟我一样转一圈搜集key就好了。最后在图书馆门口的portal那儿集合。&lt;/p&gt;
&lt;p&gt;高潮来了，原来他们做好底边再由我来连最后的field，这感觉真实太爽了，太爽了，太爽了 经验噌噌噌跟着我的血压一起涨。&lt;/p&gt;
&lt;p&gt;回去的路上回想了一下这一切太奇妙了。&lt;/p&gt;
&lt;h3&gt;Day 6 -- 刷刷刷&lt;/h3&gt;
&lt;p&gt;恩，已经掌握Ingress所有玄学机关，是时候大打出手了。就提供一个数据参考参考，从满电到自动关机，近40W经验。&lt;/p&gt;
&lt;h3&gt;Day 7 -- 最后的冲刺&lt;/h3&gt;
&lt;p&gt;其实今天的任务很简单，轻轻松松15W经验。地点在江头公园。&lt;/p&gt;
&lt;p&gt;到了最后时刻，竟然有一种特别的说不出来的感觉。炸掉蓝军一个菊花Po（此刻我才感觉到了那些行话的精妙）后一道金光，拔地而起，八级也就那样吧，哈哈哈哈哈哈&lt;/p&gt;
&lt;p&gt;把COMM距离划至10KM（差不多整个岛内都能看见广播），发了一条，”升八，喜大普奔“。&lt;/p&gt;
&lt;p&gt;八级只是另一个开始，祝大家玩得开心&lt;/p&gt;
&lt;h3&gt;附杂七杂八&lt;/h3&gt;
&lt;h5&gt;流量 精确统计260.5M&lt;/h5&gt;
&lt;p&gt;&lt;img alt="flow" src="/photos/ingress/flowa.jpg" /&gt;&lt;/p&gt;
&lt;h5&gt;AP记录曲线，从第三天开始记录&lt;/h5&gt;
&lt;p&gt;&lt;img alt="pulse" src="/photos/ingress/pulsea.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Sat, 10 Sep 2016 20:00:00 +0800</pubDate><guid>tag:,2016-09-10:suo-sui/2016/ingress.html</guid><category>旅游</category><category>Ingress</category><category>Amoy</category></item><item><title>厦门八周</title><link>/dear-diary/2016/eight-weeks-in-Amoy.html</link><description>&lt;div id="pec-encrypted-content" style="display:none"&gt;GaTUbVUvO55vvqlOmB+a+w==;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;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
&lt;div class="ui large brown message"&gt;
    &lt;i class="lock icon"&gt;&lt;/i&gt;
    This content is encrypted.
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="ui page dimmer" id="lock-lock"&gt;
    &lt;i class="big inverted remove link icon" style="position:fixed"&gt;&lt;/i&gt;
    &lt;div class=" content"&gt;
        &lt;form id="pec-decrypt-form" class="ui form" onsubmit="javascript:$('#pec-decrypt-content').click();return false;"&gt;
            &lt;div class="inline field"&gt;
                &lt;input id="pec-content-password" type="password"  placeholder="Password"&gt;
                &lt;button class="ui button" id="pec-decrypt-content" type="button"&gt;&lt;i class="unlock icon"&gt;&lt;/i&gt;Unlock&lt;/button&gt;
            &lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(document).ready(function(){
    $('#lock-lock').dimmer({
        opacity: 0.8,
        closable: false,
    });
    $('#lock-lock').dimmer('show');
    $('.remove.link.icon').click(function(){
        $('#lock-lock').dimmer('hide');
    })
});
&lt;/script&gt;


    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i-1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding});

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };

        var init_decryptor = function() {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            decrypt_btn.addEventListener('click', function () {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);
                    $('#lock-lock').dimmer('hide');

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
            });
        };

        document.addEventListener('DOMContentLoaded', init_decryptor);
    })();
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Fri, 22 Jul 2016 22:00:00 +0800</pubDate><guid>tag:,2016-07-22:dear-diary/2016/eight-weeks-in-Amoy.html</guid><category>旅游</category></item><item><title>报销助手--Chrome插件</title><link>/hand-of-midas/2015/chrome-extension-reimbursement-assistant.html</link><description>&lt;h2&gt;楔子&lt;/h2&gt;
&lt;p&gt;其实现在已经是很久以后了，太懒了&lt;/p&gt;
&lt;p&gt;某个周末闲的发慌，突然想到公司的报销流程还是非常繁琐的，需要从一个报销系统去查自己的考勤情况，根据加班情况可以申请饭补，然后填写到报销系统里面。一来报销系统设计的巨复杂，每添加一项得点点点填填填，其次整个过程非常枯燥，机械的重复。我是一个非常怕麻烦的人，但是我还是去报销了，因为我算了一下，即便是我花了一个小时申请完报销，那么时薪就有五六百了，已经远远超过我目前的薪水了。&lt;/p&gt;
&lt;p&gt;但是这个过程应该可以优化吧&lt;/p&gt;
&lt;p&gt;Talk is cheap! 仔细分析一番决定写一个Chrome插件，虽然之前没有任何插件的经验，爬取考勤系统数据，自动填写到报销系统里面，这个过程用户只需要填一个简单的表单，就可以一键Fire了。本来打算爬虫部分也用JS实现的，考虑到自己的渣渣JS功底，最后还是用Python写了一个爬虫服务端。&lt;/p&gt;
&lt;p&gt;具体的技术分析和实现在下面详细写了，还有一些邮件也一并记录了。第一次发大群邮件非常激动，当时第一版写完的时候是半夜两点，按耐不住内心的激动，索性当时就发了邮件，想着第二天大家一到公司就发现了这么一个神器会不会特别激动。。。然后发现自己权限不够发不了&lt;code&gt;all-staff&lt;/code&gt;的邮件组，就只发了研发的。幸好当时没有发全部员工，第一版的怎么可能没有bug呢！之后很多热心测试人员纷纷提出了很多意见建议，最终这个工具能够实际使用。&lt;/p&gt;
&lt;p&gt;对对对，我还录制了一段使用报销插件的报销视频，附在邮件里面&lt;/p&gt;
&lt;p&gt;非常开心的是技术部门的两个老大也回复邮件了，给予赞赏，并且还转发了另一个加班严重的邮件组--运维，哈哈哈哈，希望这个小工具帮他们节省了时间吧&lt;/p&gt;
&lt;p&gt;最最开心的是每次看到日志又多了几行，那种快感也只有我们这些苦逼码农才知道了&lt;/p&gt;
&lt;p&gt;演示视频如下：&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
                &lt;iframe
                    src="//player.vimeo.com/video/173331689?title=0&amp;amp;byline=0&amp;amp;portrait=0"
                    width="640" height="390" frameborder="0"
                    webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;功能分析以及实现&lt;/h2&gt;
&lt;h3&gt;自动报销：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;进入报销页面，点击图标，弹出界面&lt;/li&gt;
&lt;li&gt;输入用户名，密码，daterange，点击fire&lt;/li&gt;
&lt;li&gt;js后台提交，前端等待获取数据，并解析&lt;/li&gt;
&lt;li&gt;python实现一个简单的网页爬虫功能，模拟登陆后获取考勤详情&lt;/li&gt;
&lt;li&gt;根据获取到的数据自动填写 &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;报错优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无法从报销系统获取数据时候报错提示，以及多页获取&lt;/li&gt;
&lt;li&gt;不同部门的加班规则不太一样，需要区别处理&lt;/li&gt;
&lt;li&gt;js加载后的页面无法绑定js，需要重新绑定&lt;/li&gt;
&lt;li&gt;因为报销系统js极其复杂，需要模拟各种 blur, click, change 事件&lt;/li&gt;
&lt;li&gt;简单的配置页面，提供服务器地址更改功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;美化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;popup 页面提供所有可选参数，cookie中记录成功报销之后的值以便于下一次操作（事实证明这个非常方便）&lt;/li&gt;
&lt;li&gt;成功之后显示打赏按钮与作者个人信息&lt;/li&gt;
&lt;li&gt;图标，论ps的重要性&lt;/li&gt;
&lt;li&gt;流程上更为完善，比方说点击Fire之后 disable 掉按钮并作一些 css 处理，然后按钮的地方可以显示进度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;技术基础：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://robots.thoughtbot.com/how-to-make-a-chrome-extension"&gt;一个简单的 chrome extension 的入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;主要是 JS 太难，遇到各种 JS 问题&lt;/li&gt;
&lt;li&gt;Python 实现简单爬去考勤数据，这个相对熟悉一点写起来很快&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;持续跟进&lt;/h3&gt;
&lt;p&gt;之后过了很久，公司的报销系统更新了，导致插件不能继续使用。好多人RTX问我啥时候能再更新一版，当时就觉得满满的成就感。那个周末就抽空，匹配了新的报销系统，那个感觉真是好极了，虽然没有任何物质上的回报。&lt;/p&gt;
&lt;h2&gt;第一次邮件&lt;/h2&gt;
&lt;p&gt;报销系统极其考验人们的智商和耐心，而聪明的人是这么做的：【请看附件中的视频】&lt;/p&gt;
&lt;p&gt;简而言之，就是一个我周末灵光一现想出来的一个chrome插件，收集考勤系统的用户名密码，从而获取你所有能够报销的数据，并自动填写到报销系统中，从而让报销变得轻松愉快。&lt;/p&gt;
&lt;h3&gt;如何使用？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;首先你需要一个Chrome浏览器，如果你没有甚至你不知道什么是chrome，你的朋友会耻笑你，你的家人会嫌弃你。。。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;下载邮件附件&lt;code&gt;cc-helper.crx&lt;/code&gt;，如果弹出警告请忽略&lt;/li&gt;
&lt;li&gt;打开Chrome浏览器，地址栏输入&lt;code&gt;chrome://extensions/&lt;/code&gt;,然后回车&lt;/li&gt;
&lt;li&gt;在你的硬盘中找到刚才下载的附件，拖动到当前窗口，根据提示安装&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;恭喜你，到此为止你已经安装完毕。&lt;br /&gt;
模仿视频中的操作试试吧，任何问题欢迎邮件/RTX交流。&lt;/p&gt;
&lt;h2&gt;第二次邮件&lt;/h2&gt;
&lt;p&gt;多谢大家的支持，早上来收到很多使用反馈，当然也有一些bug和改进意见。现更新一版：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加编码方式，解决部分机器乱码问题，如果还出现乱码请设置浏览器编码方式为UTF-8&lt;/li&gt;
&lt;li&gt;解决最后一行统计没有结果的bug&lt;/li&gt;
&lt;li&gt;添加贪婪模式，解决部分没有打卡记录但是仍然需要报销的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望大家持续反馈，让这个小工具更好用&lt;/p&gt;
&lt;h2&gt;第三次邮件&lt;/h2&gt;
&lt;p&gt;上周末写出了这个插件的第一版，虽然之后优化了很多地方，但是插件存在一个致命BUG，无法提交和保存。周内因为抽不出来时间，所以一直拖到这周末，望谅解。&lt;/p&gt;
&lt;p&gt;下面给出该插件完整功能介绍。&lt;br /&gt;
1. 在报销详情页面打开该插件（后附有如何安装此插件），填写考勤系统的用户名，密码，以及需要报销的时间段，默认餐补和加班原因&lt;br /&gt;
2. 贪婪模式是考虑到部分打卡故障，勾选此项之后将统计所有可能存在加班的情况（上下班如不全按正常上下班记），此类数据需要之后手工微调&lt;br /&gt;
3. 如果依然出现不能保存的情况，请刷新页面，清除缓存再次尝试&lt;br /&gt;
4. 增加配置服务器（主要用来获取考勤记录）地址页面，默认已经添加，如果后续更改将会通过邮件告知&lt;/p&gt;
&lt;p&gt;感谢之前很多热心同事帮忙测试，谢谢，希望这个小插件能够节省大家的时间&lt;/p&gt;
&lt;h2&gt;后记&lt;/h2&gt;
&lt;p&gt;非常喜欢这种感觉，运用技术解决生活中的难题，非常有成就感。另外得到那么多人的赞赏也是很开心的嘛&lt;/p&gt;
&lt;p&gt;技术其实不必很厉害，很多东西都是现学的，比方说 Chrome 插件，看着教程然后一步一步实现自己的想法&lt;/p&gt;
&lt;p&gt;当初选择技术这条路线也是同样的想法，勿忘初衷&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Sun, 27 Dec 2015 11:11:00 +0800</pubDate><guid>tag:,2015-12-27:hand-of-midas/2015/chrome-extension-reimbursement-assistant.html</guid><category>Chrome-Extension</category><category>js</category></item><item><title>SSH学习笔记</title><link>/hand-of-midas/2015/learning-ssh.html</link><description>&lt;h4&gt;SSH 学习笔记&lt;/h4&gt;
&lt;p&gt;因为工作的原因最近两个礼拜都在看一些跟SSH有关的东西，查阅了大量的资料，其中包括各种博客。最直观的感受就是看博客可能会获得一些小技巧，解决眼下的问题。等到下一次出问题的时候又得大量查阅各种资料（其实主要就是google一下看是否相同的或者类似的需求已经被实现了）。所以当你需要彻底了解一个事情的时候，RFC才是最终的地方。你去看他的标准，从最根本的地方了解他，这样才能彻底的驾驭。  &lt;/p&gt;
&lt;p&gt;下面是整理的一些笔记，为方便起见分为几个模块，本文为所有的目录索引。文中直接引用的地方已经标注，部分内容为自己翻译。&lt;/p&gt;
&lt;h5&gt;&lt;a href="/hand-of-midas/2015/ssh-RFC.html"&gt;SSH RFC&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;认识一个事情最根本也是最彻底的方式就是从他的定义开始，所以如果你不只是用用SSH，而需要更为深入的理解其原理，私人定制部分功能，那么去读一下RFC吧。&lt;br /&gt;
&lt;a href="nice"&gt;这儿&lt;/a&gt;简单的把SSH几个部分罗列了一下，更为全面的解释参照&lt;a href="http://www.rfc-base.org/txt/rfc-4251.txt"&gt;RFC官方文档&lt;/a&gt;。  &lt;/p&gt;
&lt;h5&gt;&lt;a href="/hand-of-midas/2015/ssh-auth.html"&gt;SSH认证&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;密码认证&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公钥认证&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用ssh-agent的公钥认证&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用ssh-agent forwarding的公钥认证&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;a href="/hand-of-midas/2015/ssh-tunnel.html"&gt;SSH隧道（SSH tunnel)&lt;/a&gt;&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Local Port Forwarding&lt;/li&gt;
&lt;li&gt;Remote Port Forwarding&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;a href="/hand-of-midas/2015/ssh-config-tips.html"&gt;SSH配置技巧&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;配置主机别名, 省略用户名&lt;/li&gt;
&lt;li&gt;配置密钥登录&lt;/li&gt;
&lt;li&gt;使用Agent管理密钥&lt;/li&gt;
&lt;li&gt;配置Agent Forwarding&lt;/li&gt;
&lt;li&gt;建立长连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="/hand-of-midas/2015/ssh-tips.html"&gt;SSH使用技巧&lt;/a&gt;&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过SSH执行命令&lt;/li&gt;
&lt;li&gt;Agent Forwarding&lt;/li&gt;
&lt;li&gt;Enable X mode&lt;/li&gt;
&lt;li&gt;运行SSH在后台，不需要输出&lt;/li&gt;
&lt;li&gt;psudo-tty allocation&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;SSH Pyhon/Golang实现&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;批量SSH工具&lt;br /&gt;
    此部分的代码日后整理好了之后将给出github地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;SSH 开销&lt;/h5&gt;
&lt;h5&gt;其他&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加密&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="/hand-of-midas/2015/ssh-agent.html"&gt;SSH Agent&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="/hand-of-midas/2015/how-does-key-challenges-work.html"&gt;key challenge如何工作&lt;/a&gt;&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;公钥和私钥&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;公钥，顾名思义，公开的密钥，即可以通过公开的途径或者仓库让其他人获得。相反，私钥必须只能由持有者获得。因为公钥和私钥在数学上的相关性，凡是被公钥加密的信息都可以由相应地私钥解密，反之亦然。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="/hand-of-midas/2015/ssh-agent-hijacking.html"&gt;Agent Hijacking&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;em&gt;参考&lt;/em&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/aix/library/au-sshsecurity/"&gt;Getting started with SSH security and configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.chinaunix.net/uid-21854925-id-3082425.html"&gt;ssh详细登录过程 &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html"&gt;An Illustrated Guide to SSH Agent Forwarding&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/sdcxyz/article/details/41487897"&gt;SSH Agent Forwarding原理&lt;/a&gt;  &amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="http://blog.trackets.com/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html"&gt;SSH Tunnel - Local and Remote Port Forwarding Explained With Examples&lt;/a&gt;  &amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;a href="http://www.seye.com.cn/newsDetail.lzs?id=959"&gt;远程登录SSH安全小技巧&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;&lt;a href="https://www.comodo.com/resources/small-business/digital-certificates2.php"&gt;Public Key and Private Keys&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Fri, 28 Aug 2015 10:20:00 +0800</pubDate><guid>tag:,2015-08-28:hand-of-midas/2015/learning-ssh.html</guid><category>SSH</category></item><item><title>SSH学习笔记之--Key Challenge 如何工作</title><link>/hand-of-midas/2015/how-does-key-challenges-work.html</link><description>&lt;h4&gt;Key Challenge 如何工作&lt;/h4&gt;
&lt;p&gt;agent非常聪明的一点就是他可以不用将private key暴露给任何人就可以确认一个人的身份（确切的说是拥有私钥的人）。  &lt;/p&gt;
&lt;p&gt;当用户ssh登陆一台远端服务器的时候，发送包含username和key的请求，其中的username帮助服务器确定其公钥的位置--一般在&lt;code&gt;$HOME/.ssh/authorized_keys&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;服务器端生成一个challenge，其唯一可以被拥有私钥的设备答复。服务器产生并保存一个大的随机数，然后以用户的公钥进行加密，将生成的二进制数据发送给请求的用户。对于没有私钥的用户这些数据没有任何意义。  &lt;/p&gt;
&lt;p&gt;当agent接受到challenge, 它用私钥进行解密，获得远端服务器生成的原始随机数。agetn把获得的随机数，附加SSH session ID(该值每一个连接都不一样)，进行md5加密，作为key response返回给服务器。  &lt;/p&gt;
&lt;p&gt;服务器计算相同的md5（根据随机数和SSH session ID），与返回的key response进行对比，如果匹配则认证成功。如果不对的话，agent里面的下一个私钥将被用来进行相同的尝试，直到成功或者因为所有的私钥尝试完而失败。  &lt;/p&gt;
&lt;p&gt;很明显，原始的随机数在client/agent交互的时候并不会被暴露，这也是基于安全性考虑以防止在client/server信息交互的过程中随机数被获取。&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt" src="http://www.unixwiz.net/images/ssh-key-challenge.gif" title="Title" /&gt;
&lt;img alt="alt" src="http://www.unixwiz.net/images/ssh-key-response.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Thu, 27 Aug 2015 10:20:00 +0800</pubDate><guid>tag:,2015-08-27:hand-of-midas/2015/how-does-key-challenges-work.html</guid><category>SSH</category><category>Key Challenge</category></item><item><title>SSH学习笔记之--SSH RFC</title><link>/hand-of-midas/2015/ssh-RFC.html</link><description>&lt;h3&gt;SSH RFC&lt;/h3&gt;
&lt;h4&gt;&lt;a href="http://www.rfc-base.org/txt/rfc-4251.txt"&gt;The Secure Shell (SSH) Protocol Architecture&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Secure Shell (SSH) is a protocol for secure remote login and other secure network services over an insecure network.  It consists of three major components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Transport Layer Protocol [SSH-TRANS] provides server
     authentication, confidentiality, and integrity.  It may optionally
     also provide compression.  The transport layer will typically be
     run over a TCP/IP connection, but might also be used on top of any
     other reliable data stream.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The User Authentication Protocol [SSH-USERAUTH] authenticates the
     client-side user to the server.  It runs over the transport layer
     protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Connection Protocol [SSH-CONNECT] multiplexes the encrypted
     tunnel into several logical channels.  It runs over the user
     authentication protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The client sends a service request once a secure transport layer
   connection has been established.  A second service request is sent
   after user authentication is complete.  This allows new protocols to
   be defined and coexist with the protocols listed above.&lt;/p&gt;
&lt;p&gt;The connection protocol provides channels that can be used for a wide
   range of purposes.  Standard methods are provided for setting up
   secure interactive shell sessions and for forwarding ("tunneling")
   arbitrary TCP/IP ports and X11 connections.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://www.ietf.org/rfc/rfc4253.txt"&gt;The Secure Shell (SSH) Transport Layer Protocol&lt;/a&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;a href="https://tools.ietf.org/html/rfc4252"&gt;The Secure Shell (SSH) Authentication Protocol&lt;/a&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;a href="https://tools.ietf.org/html/rfc4254"&gt;The Secure Shell (SSH) Connection Protocol&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;The SSH Connection Protocol has been designed to run on top of the
   SSH transport layer and user authentication protocols ([SSH-TRANS]
   and [SSH-USERAUTH]).  It provides interactive login sessions, remote
   execution of commands, forwarded TCP/IP connections, and forwarded
   X11 connections.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Channel Mehanism&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All terminal sessions, forwarded connections, etc., are channels.
   Either side may open a channel.  Multiple channels are multiplexed
   into a single connection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interactive Session&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A session is a remote execution of a program.  The program may be a
   shell, an application, a system command, or some built-in subsystem.
   It may or may not have a tty, and may or may not involve X11
   forwarding.  Multiple sessions can be active simultaneously.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Thu, 27 Aug 2015 10:20:00 +0800</pubDate><guid>tag:,2015-08-27:hand-of-midas/2015/ssh-RFC.html</guid><category>SSH</category><category>RFC</category></item><item><title>SSH学习笔记之--SSH-Agent</title><link>/hand-of-midas/2015/ssh-agent.html</link><description>&lt;h3&gt;SSH Agent&lt;/h3&gt;
&lt;h4&gt;SSH Agent简介&lt;/h4&gt;
&lt;p&gt;ssh-agent是专为既令人愉快又安全的处理RSA和DSA密钥而设计的特殊程序，它包括在OpenSSH分发内。不同于ssh，ssh-agent是个长时间持续运行的守护进程（daemon），设计它的唯一目的就是对解密的专用密钥进行高速缓存。&lt;/p&gt;
&lt;p&gt;ssh包含的内建支持允许它同ssh-agent通信，允许ssh不必每次新连接时都提示您要密码才能获取解密的专用密钥。对于ssh-agent，您只要使用ssh-add把专用密钥添加到ssh-agent的高速缓存中。这是个一次性过程；用过ssh-add之后，ssh将从ssh-agent获取您的专用密钥，而不会提示要密码短语来烦您了。&lt;/p&gt;
&lt;h4&gt;如何使用&lt;/h4&gt;
&lt;p&gt;启动ssh-agent：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;ssh-agent -s&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很奇怪，为什么不直接执行&lt;code&gt;ssh-agent -s&lt;/code&gt;，我们来看一下直接运行的结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh-agent
&lt;span class="nv"&gt;SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/ssh-xDWYq20983/agent.20983&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; SSH_AUTH_SOCK&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;SSH_AGENT_PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;20984&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; SSH_AGENT_PID&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; Agent pid 20984&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正如您所看到的，事实上ssh-agent的输出是一系列bash命令；如果这些命令被执行，则将设置两个环境变量：SSH_AUTH_SOCK和SSH_AGENT_PID。内含的export命令使这些环境变量对之后运行的任何附加命令都可用。唔，如果shell真对这些行进行计算，这一切才会发生，但是此时它们只是被打印到标准输出（stdout）而已。要使之确定，我们需要使用之前的方式进行调用。&lt;/p&gt;
&lt;p&gt;然后就可以将私钥导入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-add &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;#不指定文件的话默认从~/.ssh/id_rsa读取&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;不足之处&lt;/h4&gt;
&lt;p&gt;首先，&lt;code&gt;eval`ssh-agent`&lt;/code&gt;每次执行都会启动一个新的ssh-agent副本；这不仅仅是有一丁点儿浪费，而且还意味着您得使用ssh-add向每个新的ssh-agent副本添加专用密钥。如果您只想打开系统上的一个终端或控制台，这没什么大不了的，但是我们中大多数人打开相当多的终端，每次新打开控制台都需要键入密码短语。从技术角度讲，既然一个ssh-agent进程的确应当足够了，要是我们还需这样做，这毫无道理。&lt;/p&gt;
&lt;p&gt;有关ssh-agent的缺省设置的另外一个问题是它同cron作业不兼容。由于cron作业是cron进程启动的，这些作业无法从它们的环境中继承SSH_AUTH_SOCK变量，因而也无从知道ssh-agent进程正在运行以及如何同它联系。事实证明这个问题也是可以修补的。
我们在 /etc/profile.d下面新建一个配置文件ssh-agentsh：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f ~/.agent.env &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
. ~/.agent.env &amp;gt;/dev/null
&lt;span class="k"&gt;if&lt;/span&gt; ! &lt;span class="nb"&gt;kill&lt;/span&gt; -0 &lt;span class="nv"&gt;$SSH_AGENT_PID&lt;/span&gt; &amp;gt;/dev/null 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Stale agent file found. Spawning new agent...&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;ssh-agent &lt;span class="p"&gt;|&lt;/span&gt;tee ~/.agent.env&lt;span class="sb"&gt;`&lt;/span&gt;
ssh-add
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Starting ssh-agent...&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;ssh-agent &lt;span class="p"&gt;|&lt;/span&gt;tee ~/.agent.env&lt;span class="sb"&gt;`&lt;/span&gt;
ssh-add
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安全问题&lt;/h4&gt;
&lt;p&gt;ssh-agent本身不会导致安全性问题，但是因为其将私钥存放在内存中，如果目标机器的admin用户不可信赖，很有可能导致用户密钥信息泄露。&lt;/p&gt;
&lt;h4&gt;其他&lt;/h4&gt;
&lt;p&gt;更多用法参见ssh-agent man pages&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Thu, 27 Aug 2015 10:20:00 +0800</pubDate><guid>tag:,2015-08-27:hand-of-midas/2015/ssh-agent.html</guid><category>SSH</category><category>Agent</category></item><item><title>SSH学习笔记之--Agent Hijacking</title><link>/hand-of-midas/2015/ssh-agent-hijacking.html</link><description>&lt;h4&gt;Agent Hijacking&lt;/h4&gt;
&lt;p&gt;agent forwarding在安全方面有一个好处就是用户的私钥永远不会出现在远端服务器或者传输过程中。但却会面临另外一个安全隐患：agent hijacking&lt;/p&gt;
&lt;p&gt;ssh实现的每一个方式都会提供一种让client向agent请求服务的机制，在UNIX/Linux上是用/tmp/文件夹下面的UNIX domain socket实现的。  &lt;/p&gt;
&lt;p&gt;这个文件是被系统重度保护的，只有当前进程的用户才能访问，并且被保护在相应地子文件夹下面。但是任何措施都不能防止root用户访问任何一个文件。  &lt;/p&gt;
&lt;p&gt;root用户可以通过该domain socket连接该socket对应的用户能够访问的任何机器，并且是以这个用户的身份。  &lt;/p&gt;
&lt;p&gt;下面是简单的实现方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -l /tmp/ssh*      &lt;span class="c1"&gt;#look for somebody&amp;#39;s agent socket&lt;/span&gt;
/tmp/ssh-CXkd6094:
total 24
srwxr-xr-x    &lt;span class="m"&gt;1&lt;/span&gt; steve    steve           &lt;span class="m"&gt;0&lt;/span&gt; Aug &lt;span class="m"&gt;30&lt;/span&gt; 08:46 agent.6094&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/ssh-CXkd6094/agent.6094

ssh steve@remotesystem

remote$                  &lt;span class="c1"&gt;# Gotcha! Logged in as &amp;quot;steve&amp;quot; user on remote system!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果没有root权限也没关系，可能你有sudo的权限，同样下面的操作也可以完成相同的目的：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;localhost$ ssh -A user@host
$ setfacl -m otheruser:x   &lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
$ setfacl -m otheruser:rwx &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
$ sudo su - otheruser
$ ssh server
otheruser@server$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目前没有任何技术手段防止root用户劫持SSH agent socket，所以鉴于安全方面的考虑，慎用ssh angent forwarding.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Thu, 27 Aug 2015 10:20:00 +0800</pubDate><guid>tag:,2015-08-27:hand-of-midas/2015/ssh-agent-hijacking.html</guid><category>SSH</category><category>anget hijacking</category></item><item><title>SSH学习笔记之--SSH 认证</title><link>/hand-of-midas/2015/ssh-auth.html</link><description>&lt;h3&gt;SSH认证过程&lt;/h3&gt;
&lt;p&gt;首先感谢Steve Friedlde 的文章&lt;a href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html"&gt;An Illustrated Guide to SSH Agent Forwarding&lt;/a&gt;，感谢&lt;a href="http://blog.csdn.net/sdcxyz/article/details/41487897"&gt;SSH Agent Forwarding原理&lt;/a&gt;(注：该文也为转载，但是原博链接已经失效)。本文主要内容参考引用自这两篇文章，并做了部分错误勘正。&lt;/p&gt;
&lt;h4&gt;密码认证&lt;/h4&gt;
&lt;p&gt;密码认证最简单，下面是认证步骤:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. ssh client向目标机器发起tcp连接(一般22端口)并发送username (username是SSH协议的一部分)
2. 目标机器ssh daemon回应需要密码
3. ssh client提示用户输入密码，然后将密码发送到服务器端
4. ssh daemon如果密码匹配成功, 则认证通过
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基于密码认证的缺点是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 容易被brute-force password guessing
2. 不适合于管理多台机器
3. 若每台机器使用相同的密码，如果密码泄露，所有机器都被攻破。若使用不同密码，则密码太多很难记住，因此也不可能使用很强的密码。
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;公钥认证&lt;/h4&gt;
&lt;p&gt;公钥认证详细协议见RFC4252的publickey部分  &lt;/p&gt;
&lt;p&gt;公钥认证需要先在本地机器生成公钥私钥对，然后将公钥放到目标机器的$HOME/.ssh/authorized_keys中。具体过程如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. ssh client向目标机器发起tcp连接(一般22端口)，并发送包含username和key的请求
2. 目标机器在本地authorized_keys 中查找对应信息，创建基于所查找到的公钥的challenge,发送到ssh client
3. ssh client接收到challenge之后，在本机查找对应的私钥，如果私钥被passphrase加密的话提示用户输入passphrase以解密私钥
4. ssh client发送私钥签名的challenge给等待的ssh daemon
5. 目标机器验证返回信息，如果有效则通过认证
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果公钥认证失败，ssh还会尝试其他认证策略，比如密码认证。多个认证策略的尝试顺序和服务器端没关系，由客户端的配置来决定。  &lt;/p&gt;
&lt;p&gt;需要说明的是，即使把本机的公钥(如.ssh/id_rsa.pub)删除掉，认证仍然可以成功。那第三步中提到的公钥从哪里来的呢？实际上，上面(如第二步)提到的私钥(如.ssh/id_rsa)是广义的，既包含了私钥，也包含了公钥，也有可能还包含了其他信息(比如证书)。比如通过ssh-keygen -y ~/.ssh/id_rsa就可以看到id_rsa里面的公钥。  &lt;/p&gt;
&lt;p&gt;用作认证的私钥最好通过passphrase进行加密，否则会有很大安全隐患，只要私钥泄露，别人就能访问你能访问的所有远程机器。&lt;/p&gt;
&lt;p&gt;公钥认证由于需要配置公钥私钥，初始配置稍微麻烦一些，但好处是所有机器只需配置一组公私钥对就可以了。由于只有一个私钥，不必设置多个密码，因此可以为其设置比较强的密码。并且仅当私钥和密码一同丢失时才有风险，但这个概率非常小。&lt;/p&gt;
&lt;p&gt;不过仍然烦人的是，每次登陆都得输入passphrase。&lt;/p&gt;
&lt;h4&gt;使用ssh-agent的公钥认证&lt;/h4&gt;
&lt;p&gt;为解决每次登陆远程机器都需要输入passphrase的问题，ssh-agent被引入了。ssh-agent启动后，可通过ssh-add将私钥加入agent. ssh-add会提示用户输入passphrase以解密私钥，然后将解密后的私钥纳入agent管理。agent可同时管理多个私钥。  &lt;/p&gt;
&lt;p&gt;连接服务器的步骤如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. ssh client向目标机器发起tcp连接(一般22端口)，并发送包含username和key的请求
2. 目标机器在本地authorized_keys 中查找对应信息，创建基于所查找到的公钥的challenge,发送到ssh client
3. ssh client 接收到challenge并把它扔给运行中的agent，agent,而不是ssh client本身打开用户私钥，如果被加密需要输入passphrase
4. agent将私钥签名的信息返回给client, 然后再发送到目标机器的ssh daemon
5. 目标机器校验返回信息，如果有效则通过认证
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果ssh-agent中有多个私钥, 会依次尝试，直到认证通过或遍历所有私钥.  &lt;/p&gt;
&lt;p&gt;在整个过程中，私钥只存在于agent的内部(内存中), ssh client并没有获取到私钥。  &lt;/p&gt;
&lt;p&gt;使用ssh-agent后，只需在将key纳入agent管理时输入passphrase，之后的ssh相关操作就不必输入passphrase了。但如果从本机A登陆机器B后，又想从B登陆C (或从B传输文件到C)，仍然需要输入passphrase (如果B上也配置了用户的私钥)或password。还是比较麻烦。  &lt;/p&gt;
&lt;p&gt;幸好，ssh agent forwarding解决了这一问题。  &lt;/p&gt;
&lt;h4&gt;使用ssh-agent forwarding的公钥认证&lt;/h4&gt;
&lt;p&gt;简而言之，ssh-agent forwarding 允许一系列的ssh连接将key challenges依次返回给最初的ssh-agent，避免了在其他中间机器上面输入密码的麻烦。  &lt;/p&gt;
&lt;p&gt;步骤如下：
    1. 假设用户已经从本地机器连接到了第一台机器server。本地的agent中已保存了用户的私钥
    2. 用户从server向server2请求ssh连接， 发送包含username和key的请求
    3. server2的ssh daemon查询authorized_keys文件，根据查找到的key构建challenge并发回server
    4. 神奇的事情发生了：server机器上的client接受了这个challenge，把它发送到本台机器的sshd,sshd又将challenge发送到之前与本地机器建立的连接中，本地机器的client最终处理这个challenge,将签名之后的信息延相反的方向传递
    5. server2上的daemon校验返回信息，如果有效则通过认证建立连接  &lt;/p&gt;
&lt;p&gt;注意server上其实ssh-agent压根就没有启动，ssh client只是检查$SSH_AUTH_SOCK这个环境变量是否存在，如果存在，则和这个变量指定的domain socket进行通信。而这个domain socket其实是由server上的sshd创建的。所以ssh client其实是和sshd在通信。  &lt;/p&gt;
&lt;p&gt;而server的sshd并没有私钥信息，所以sshd做的事情其实是转发该请求到homepc的ssh client，再由该client将请求转发给本地(homepc)的agent。该agent将需要的消息和签名准备完毕后，再将此数据按原路返回到server的ssh client. 路径如下所示:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;agent_local --》(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="x"&gt;)--》 ssh_local --》(tcp)--》  sshd_server --》(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="x"&gt;)--》 ssh_server --》(tcp)--》  sshd_server2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这下明白为什么叫agent forwarding(转发)了吧，就是所有中间节点的sshd和ssh都充当了数据转发的角色，一直将私钥操作的request转发到了本机的agent，然后再将agent的response原路返回。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Thu, 27 Aug 2015 10:20:00 +0800</pubDate><guid>tag:,2015-08-27:hand-of-midas/2015/ssh-auth.html</guid><category>SSH</category><category>Auth</category></item><item><title>SSH学习笔记之--SSH 配置技巧</title><link>/hand-of-midas/2015/ssh-config-tips.html</link><description>&lt;h3&gt;SSH配置技巧&lt;/h3&gt;
&lt;h5&gt;配置主机别名, 省略用户名&lt;/h5&gt;
&lt;p&gt;修改（创建如果不存在）~/.ssh/config,  增加下面条目(可添加多个)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host cc
HostName 192.168.1.1
Port 22
User root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就可以直接这样登录，如果配置了密钥登录的话就连密码也不需要输入了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh cc
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;配置密钥登录&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成私钥公钥对&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh-keygen -t rsa                                                    &lt;span class="c1"&gt;#生成RSA类型的密钥对  &lt;/span&gt;
Generating public/private rsa key pair.  
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/home/yule/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:          &lt;span class="c1"&gt;#输入密钥存放位置，直接回车为默认值  &lt;/span&gt;
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:                            &lt;span class="c1"&gt;#输入密钥密码，用来解锁密钥  &lt;/span&gt;
Enter same passphrase again:  
Your identification has been saved in /home/yule/.ssh/id_rsa.  
Your public key has been saved in /home/yule/.ssh/id_rsa.pub.  
The key fingerprint is:  
3c:13:20:5c:80:02:3d:e5:64:44:3e:69:2b:83:b9:d8 yule@client.cc.test  
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:  
+--&lt;span class="o"&gt;[&lt;/span&gt; RSA 2048&lt;span class="o"&gt;]&lt;/span&gt;----+  
&lt;span class="p"&gt;|&lt;/span&gt;o. *Ooo          &lt;span class="p"&gt;|&lt;/span&gt;  
&lt;span class="p"&gt;|&lt;/span&gt;. +&lt;span class="o"&gt;=&lt;/span&gt;.o .         &lt;span class="p"&gt;|&lt;/span&gt;  
&lt;span class="p"&gt;|&lt;/span&gt; . .*   .        &lt;span class="p"&gt;|&lt;/span&gt;  
&lt;span class="p"&gt;|&lt;/span&gt; o . o . .       &lt;span class="p"&gt;|&lt;/span&gt;  
&lt;span class="p"&gt;|&lt;/span&gt;o o .   S        &lt;span class="p"&gt;|&lt;/span&gt;  
&lt;span class="p"&gt;|&lt;/span&gt;.o o     o       &lt;span class="p"&gt;|&lt;/span&gt;  
&lt;span class="p"&gt;|&lt;/span&gt;o E              &lt;span class="p"&gt;|&lt;/span&gt;  
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;  
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;  
+-----------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将公钥拷贝到需要ssh登录的服务器&lt;/p&gt;
&lt;p&gt;如果当前机器有&lt;code&gt;ssh-copy-id&lt;/code&gt;命令的话将会非常方便:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-copy-id &lt;span class="o"&gt;[&lt;/span&gt;identity_file&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;user@&lt;span class="o"&gt;]&lt;/span&gt;machine
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;否则需要手动拷贝到目标机器上面，然后把内容添加到目标机器的&lt;em&gt;$HOME/.ssh/authorized_keys&lt;/em&gt;文件内：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scp ~/.ssh/id_rsa.pub &lt;span class="o"&gt;[&lt;/span&gt;usr@&lt;span class="o"&gt;]&lt;/span&gt;machine:/tmp
ssh &lt;span class="o"&gt;[&lt;/span&gt;usr@&lt;span class="o"&gt;]&lt;/span&gt;machine
cat /tmp/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改相关文件权限&lt;/p&gt;
&lt;p&gt;ssh对于文件权限非常敏感，通常无法通过ssh密钥登录很有可能就是因为文件权限出错。注意下面的权限为目标机器的权限。&lt;br /&gt;
1. ~/.ssh 目录权限为700: &lt;code&gt;chmod 700 ~/.ssh&lt;/code&gt;&lt;br /&gt;
2. ~/.ssh/authorized_keys 文件权限为600: &lt;code&gt;chomod 600 ~/.ssh/authorized_keys&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样不出意外的话，此时就可以使用密钥（无需输入密码）登录远端服务器了。&lt;/p&gt;
&lt;h4&gt;使用Agent管理密钥&lt;/h4&gt;
&lt;p&gt;关于Agent的介绍，请参照系列文章&lt;a href=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eval `ssh-agent -s`             #启动ssh-agent
ssh-add [-i file]               #添加默认位置的密钥，如果密钥被密码加密的话需要输入密码,可指定私钥位置
ssh-add -D|-d                   #删除（全部）密钥
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;配置Agent Forwarding&lt;/h4&gt;
&lt;p&gt;可以在你的ssh配置中改变下面条目，通常在/etc/ssh_config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;AllowAgentForwarding yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以使用命令，推荐使用后者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -A [user@]machine 
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;建立长连接&lt;/h4&gt;
&lt;p&gt;可以在你的ssh配置中改变下面条目，通常在/etc/ssh_config.4h 代表连接保持4小时:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ControlPersist 4h
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Thu, 27 Aug 2015 10:20:00 +0800</pubDate><guid>tag:,2015-08-27:hand-of-midas/2015/ssh-config-tips.html</guid><category>SSH</category><category>config</category></item><item><title>SSH学习笔记之--SSH 使用技巧</title><link>/hand-of-midas/2015/ssh-tips.html</link><description>&lt;h3&gt;SSH使用技巧&lt;/h3&gt;
&lt;h4&gt;通过SSH执行命令&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh [user@]machine &amp;quot;cmd&amp;quot;                                  # 执行单条命令
ssh [user@]machine &amp;quot;bash -s&amp;quot; &amp;lt; shell_script.sh            # 执行脚本
ssh -t [user@]machine &amp;quot;sudo bash -s&amp;quot; &amp;lt; shell_script.sh    # sudo执行
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Agent Forwarding&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -A hostname
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-A     Enables forwarding of the authentication agent connection.  This can also be specified on a per-host basis in a configuration file.
       Agent forwarding should be enabled with caution.  Users with the ability to bypass file permissions on the remote host (for the agent&amp;#39;s UNIX-domain socket) can access the local agent through the forwarded connection.  An attacker cannot obtain key material from the agent, however they can perform operations on the keys that enable them to authenticate using the identities loaded into the agent.
-a     Disables forwarding of the authentication agent connection.
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;h4&gt;Enable X mode&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -Xf hostname
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-X      Enables X11 forwarding.  This can also be specified on a per-host basis in a configuration file.

        X11 forwarding should be enabled with caution.  Users with the ability to bypass file permissions on the remote host (for the user&amp;#39;s X authorization database) can access the local X11 display through the forwarded connection.  An attacker may then be &amp;gt;able to perform activities such as keystroke monitoring.
-x      Disables X11 forwarding.

-f      Requests ssh to go to background just before command execution.  This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background.  This implies -n.  The recommended way to start X11 programs at a remote site is with something like ssh -f host xterm.

        If the ExitOnForwardFailure configuration option is set to ``yes&amp;#39;&amp;#39;, then a client started with -f will wait for all remote port forwards to be successfully established before placing itself in the background.
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;h4&gt;运行SSH在后台，不需要输出&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -nNT hostname
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-N      Do not execute a remote command.  This is useful for just forwarding ports (protocol version 2 only).

-n      Redirects stdin from /dev/null (actually, prevents reading from stdin).  This must be used when ssh is run in the background.  A common trick is to use this to run X11 programs on a remote machine.  For example, ssh -n shadows.cs.hut.fi emacs &amp;amp; will start an emacs on shadows.cs.hut.fi, and the X11 connection will be automatically forwarded over an encrypted channel.  The ssh program will be put in the background.  (This does not work if ssh needs to ask for a password or passphrase; see also the -f
-T      Disable pseudo-tty allocation.
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;h4&gt;psudo-tty allocation&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#分别执行下面两条命令即可明白有什么不同
ssh -t hostname &amp;quot;sudo whoami&amp;quot;
ssh hostname &amp;quot;sudo whoami&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-t      Force pseudo-tty allocation.  This can be used to execute arbitrary screen-based programs on a remote machine, which can be very useful, e.g. when implementing menu services.  Multiple -t options force tty allocation, even if ssh has no local tty.
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Thu, 27 Aug 2015 10:20:00 +0800</pubDate><guid>tag:,2015-08-27:hand-of-midas/2015/ssh-tips.html</guid><category>SSH</category><category>tips</category></item><item><title>SSH学习笔记之--SSH Tunnel</title><link>/hand-of-midas/2015/ssh-tunnel.html</link><description>&lt;h3&gt;SSH隧道&lt;/h3&gt;
&lt;p&gt;本文前半部分摘录自 &lt;a href="http://blog.trackets.com/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html"&gt;SSH Tunnel - Local and Remote Port Forwarding Explained With Examples&lt;/a&gt;, 后面是自己在亲自实践的过程中遇到的问题。  &lt;/p&gt;
&lt;p&gt;There are two ways to create an SSH tunnel, local and remote port forwarding (there’s also dynamic forwarding, but we won’t cover that here). The best way to understand these is by an example, let’s start with local port forwarding.  &lt;/p&gt;
&lt;h4&gt;Local port forwarding&lt;/h4&gt;
&lt;p&gt;Imagine you’re on a private network which doesn’t allow connections to a specific server. Let’s say you’re at work and imgur.com is being blocked. To get around this we can create a tunnel through a server which isn’t on our network and thus can access Imgur.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh -L 9000:imgur.com:80 user@example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key here is -L which says we’re doing local port forwarding. Then it says we’re forwarding our local port 9000 to imgur.com:80, which is the default port for HTTP. Now open your browser and go to http://localhost:9000.  &lt;/p&gt;
&lt;p&gt;The awesome thing about SSH tunnels is that they are encrypted. Nobody is going to see what sites you’re visiting, they’ll only see an SSH connection to your server.&lt;/p&gt;
&lt;h4&gt;Connecting to a database behind a firewall&lt;/h4&gt;
&lt;p&gt;Another good example is if you need to access a port on your server which can only be accessed from localhost and not remotely.&lt;/p&gt;
&lt;p&gt;An example here is when you need to connect to a database console, which only allows local connection for security reasons. Let’s say you’re running PostgreSQL on your server, which by default listens on the port 5432.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh -L 9000:localhost:5432 user@example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The part that changed here is the localhost:5432, which says to forward connections from your local port 9000 to localhost:5432 on your server. Now we can simply connect to our database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql -h localhost -p 9000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let’s stop here for a little bit an explain what is actually going on. In the first example the 9000:imgur.com:80 is actually saying forward my local port 9000 to imgur.com at port 80. You can imagine SSH on your server actually making a connection (a tunnel) between those two ports, one on your local machine, and one on the target destination.&lt;/p&gt;
&lt;p&gt;If we however say something like 9000:localhost:5432, it means localhost from the server’s perspective, not localhost on your machine. This means forward my local port 9000 to port 5432 on the server, because when you’re on the server, localhost means the server itself.&lt;/p&gt;
&lt;p&gt;This might be a bit confusing, but it is important to understand what the syntax actually means here.&lt;/p&gt;
&lt;h4&gt;Remote port forwarding&lt;/h4&gt;
&lt;p&gt;Now comes the second part of this tutorial, which is remote port forwarding. This is again best to explain with an example.&lt;/p&gt;
&lt;p&gt;Say that you’re developing a Rails application on your local machine, and you’d like to show it to a friend. Unfortunately your ISP didn’t provide you with a public IP address, so it’s not possible to connect to your machine directly via the internet.&lt;/p&gt;
&lt;p&gt;Sometimes this can be solved by configuring NAT (Network Address Translation) on your router, but this doesn’t always work, and it requires you to change the configuration on your router, which isn’t always desirable. This solution also doesn’t work when you don’t have admin access on your network.&lt;/p&gt;
&lt;p&gt;To fix this problem you need to have another computer, which is publicly accessible and have SSH access to it. It can be any server on the internet, as long as you can connect to it. We’ll tell SSH to make a tunnel that opens up a new port on the server, and connects it to a local port on your machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh -R 9000:localhost:3000 user@example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The syntax here is very similar to local port forwarding, with a single change of -L for -R. But as with local port forwarding, the syntax remains the same.&lt;/p&gt;
&lt;p&gt;First you need to specify the port on which th remote server will listen, which in this case is 9000, and next follows localhost for your local machine, and the local port, which in this case is 3000.&lt;/p&gt;
&lt;p&gt;There is one more thing you need to do to enable this. SSH doesn’t by default allow remote hosts to forwarded ports. To enable this open /etc/ssh/sshd_config and add the following line somewhere in that config file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GatewayPorts yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you add it only once!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vim /etc/ssh/sshd_config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And restart SSH&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service ssh restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this you should be able to connect to the server remotely, even from your local machine. The way this would work is that you would first create an SSH tunnel that forwards traffic from the server on port 9000 to your local machine on port 3000. This means that if you connect to the server on port 9000 from your local machine, you’ll actually make a request to your machine through the SSH tunnel.&lt;/p&gt;
&lt;h4&gt;A few closing tips&lt;/h4&gt;
&lt;p&gt;You might have noticed that every time we create a tunnel you also SSH into the server and get a shell. This isn’t usually necessary, as you’re just trying to create a tunnel. To avoid this we can run SSH with the -nNT flags, such as the following, which will cause SSH to not allocate a tty and only do the port forwarding.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh -nNT -L 9000:imgur.com:80 user@example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SSH has a huge number of features, so I’d recommend you to checkout the manual page at man ssh, which contains even more tips.&lt;/p&gt;
&lt;p&gt;There’s also an amazing talk called &lt;a href="https://vimeo.com/54505525"&gt;The Black Magic of SSH / SSH Can Do That&lt;/a&gt;?, which I really recommend you to watch.&lt;/p&gt;
&lt;h4&gt;实践问题反馈&lt;/h4&gt;
&lt;p&gt;实际操作过程中可能或多或少会碰到一些问题，下面这个问题估计很多人都会碰到。  &lt;/p&gt;
&lt;p&gt;配置好命令之后执行：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;imgur&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="mf"&gt;@192.168.0.125&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;浏览器端显示：&lt;code&gt;unknown domain:localhost&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;WHY?&lt;/p&gt;
&lt;p&gt;答案在&lt;a href="https://www.reddit.com/r/linuxquestions/comments/3b0s7v/ssh_tunnel_issues/"&gt;这儿&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You just happened to choose a website that doesn't like weird headers (i.e. localhost instead of imgur.com). Imgur's cdn doesn't like that. Your command will work with google.com and other websites.
A couple solutions are here, with the easiest one being editing /etc/hosts.
You can also use an ssh socks proxy, which requires just a bit more configuration in your browser, but makes all the websites just work.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Thu, 27 Aug 2015 10:20:00 +0800</pubDate><guid>tag:,2015-08-27:hand-of-midas/2015/ssh-tunnel.html</guid><category>SSH</category><category>tunnel</category></item><item><title>Golang 初学</title><link>/hand-of-midas/2015/first-glance-at-go.html</link><description>&lt;h2&gt;Go&lt;/h2&gt;
&lt;h3&gt;语法差异&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Variables and Constant  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;initial&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000000&lt;/span&gt;
    &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Loop&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="c1"&gt;// classic initial/condition/after for loop &lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// most basic for loop&lt;/span&gt;
   &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// infinite loop&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If/Else  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// use commas to separate multiple expression in the same case statement &lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Weekday&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Saturday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sunday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;it&amp;#39;s the weekend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;it&amp;#39;s a weekday&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// alternate way to implement If/Else while without an expression&lt;/span&gt;
&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Hour&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;it&amp;#39;s before noon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;it&amp;#39;s after noon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Array, Slices, Maps&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions&lt;br /&gt;
    Do NOT support nested functions, function overload, function default parameter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;multiple return values  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;variadic function  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printlf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clousure&lt;br /&gt;
    Go supports anonymous functions, which can form closures.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defer   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;世界&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Panic&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;recover&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
    &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;panic errors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Errors&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pointers,  Structs,  Methods, Interface&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// _Interfaces_ are named collections of method&lt;/span&gt;
&lt;span class="c1"&gt;// signatures.&lt;/span&gt;

&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;math&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;// Here&amp;#39;s a basic interface for geometric shapes.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
    &lt;span class="nx"&gt;perim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// For our example we&amp;#39;ll implement this interface on&lt;/span&gt;
&lt;span class="c1"&gt;// `rect` and `circle` types.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// To implement an interface in Go, we just need to&lt;/span&gt;
&lt;span class="c1"&gt;// implement all the methods in the interface. Here we&lt;/span&gt;
&lt;span class="c1"&gt;// implement `geometry` on `rect`s.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;perim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The implementation for `circle`s.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;perim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// If a variable has an interface type, then we can call&lt;/span&gt;
&lt;span class="c1"&gt;// methods that are in the named interface. Here&amp;#39;s a&lt;/span&gt;
&lt;span class="c1"&gt;// generic `measure` function taking advantage of this&lt;/span&gt;
&lt;span class="c1"&gt;// to work on any `geometry`.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;measure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;perim&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// The `circle` and `rect` struct types both&lt;/span&gt;
    &lt;span class="c1"&gt;// implement the `geometry` interface so we can use&lt;/span&gt;
    &lt;span class="c1"&gt;// instances of&lt;/span&gt;
    &lt;span class="c1"&gt;// these structs as arguments to `measure`.&lt;/span&gt;
    &lt;span class="nx"&gt;measure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;measure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reflect&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;多线程处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Goroutines&lt;br /&gt;
  A goroutine is a lightweight thread of execution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;going&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scanln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;done&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Channels  &lt;/p&gt;
&lt;p&gt;Channels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}()&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Channel Buffering&lt;br /&gt;
&lt;code&gt;messages := make(chan string, 2)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Channel Direction&lt;br /&gt;
&lt;code&gt;func pong(pings &amp;lt;-chan string, pongs chan&amp;lt;- string) {}&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Closing Channel&lt;br /&gt;
&lt;code&gt;close(channel)&lt;/code&gt;&lt;br /&gt;
Closing channel means there is no more values to be sent , it is possible to close a non-empty channel  &lt;/li&gt;
&lt;li&gt;Range over channels&lt;br /&gt;
    Range can not only provide iteration over basic data structure, but also iterate over values received from a channel.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;
&lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Go&amp;#39;s _select_ lets you wait on multiple channel&lt;/span&gt;
&lt;span class="c1"&gt;// operations. Combining goroutines and channels with&lt;/span&gt;
&lt;span class="c1"&gt;// select is a powerful feature of Go.&lt;/span&gt;

&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// For our example we&amp;#39;ll select across two channels.&lt;/span&gt;
    &lt;span class="nx"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Each channel will receive a value after some amount&lt;/span&gt;
    &lt;span class="c1"&gt;// of time, to simulate e.g. blocking RPC operations&lt;/span&gt;
    &lt;span class="c1"&gt;// executing in concurrent goroutines.&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="c1"&gt;// We&amp;#39;ll use `select` to await both of these values&lt;/span&gt;
    &lt;span class="c1"&gt;// simultaneously, printing each one as it arrives.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;msg1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;received&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;msg2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;received&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;包管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go 语言中 &lt;code&gt;import&lt;/code&gt; 语句使用绝对路径的方式引入安装到本地的包。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;go get&lt;/code&gt; 命令安装远程仓库中托管的包&lt;/li&gt;
&lt;li&gt;Go 语言还提供了一个 Workspace 的机制。通过设定 GOPATH环境变量，指定除了GOROOT所指定的目录之外，Go 代码所在的位置 (也就是 Workspace 的位置)。 一般来说，GOPATH目录下会包含pkg、src和bin三个子目录，这三个目录各有用处。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bin&lt;/strong&gt; 目录用来放置编译好的可执行文件，为了使得这里的可执行文件可以方便的运行， 在 shell 中设置PATH变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pkg&lt;/strong&gt; 目录用来放置代码源文件，在进行import时，是使用这个位置作为根目录的。自己编写的代码也应该放在这下面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;src&lt;/strong&gt; 用来放置安装的包的链接对象 (Object) 的。这个概念有点类似于链接库，Go 会将编译出的可连接库放在这里， 方便编译时链接。不同的系统和处理器架构的对象会在pkg存放在不同的文件夹中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├── bin
│   └── hello
├── pkg
│   └── darwin_amd64
│       └── github.com
│           └── user
│               └── stringutil.a
└── src
    └── github.com
        └── user
            ├── hello
            │   ├── hello
            │   └── hello.go
            └── stringutil
                └── reverse.go
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;进阶&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory Allocator&lt;/li&gt;
&lt;li&gt;Garbage Collector&lt;/li&gt;
&lt;li&gt;Goroutine Scheduler&lt;/li&gt;
&lt;li&gt;Channel&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;参考资料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tour.golang.org/welcome/1"&gt;A Tour of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gobyexample.com"&gt;Go By Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://golang.org/doc/code.html#PackageNames"&gt;How to Write Go Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/p/go-fundamental-programming"&gt;go 编程基础（视频）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nullne/book/blob/master/Go%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20%E7%AC%AC%E5%9B%9B%E7%89%88.pdf"&gt;Go学习笔记 -- 雨痕&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://io-meter.com/2014/07/30/go's-package-management/"&gt;Go 语言的包依赖管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Fri, 31 Jul 2015 20:00:00 +0800</pubDate><guid>tag:,2015-07-31:hand-of-midas/2015/first-glance-at-go.html</guid><category>Programming</category><category>Tutorial</category></item><item><title>你到底想要一个什么的工作</title><link>/dear-diary/2015/What-do-you-really-want.html</link><description>&lt;div id="pec-encrypted-content" style="display:none"&gt;265pRHpKtAqWyxru5xc9WA==;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;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
&lt;div class="ui large brown message"&gt;
    &lt;i class="lock icon"&gt;&lt;/i&gt;
    This content is encrypted.
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="ui page dimmer" id="lock-lock"&gt;
    &lt;i class="big inverted remove link icon" style="position:fixed"&gt;&lt;/i&gt;
    &lt;div class=" content"&gt;
        &lt;form id="pec-decrypt-form" class="ui form" onsubmit="javascript:$('#pec-decrypt-content').click();return false;"&gt;
            &lt;div class="inline field"&gt;
                &lt;input id="pec-content-password" type="password"  placeholder="Password"&gt;
                &lt;button class="ui button" id="pec-decrypt-content" type="button"&gt;&lt;i class="unlock icon"&gt;&lt;/i&gt;Unlock&lt;/button&gt;
            &lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(document).ready(function(){
    $('#lock-lock').dimmer({
        opacity: 0.8,
        closable: false,
    });
    $('#lock-lock').dimmer('show');
    $('.remove.link.icon').click(function(){
        $('#lock-lock').dimmer('hide');
    })
});
&lt;/script&gt;


    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i-1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding});

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };

        var init_decryptor = function() {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            decrypt_btn.addEventListener('click', function () {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);
                    $('#lock-lock').dimmer('hide');

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
            });
        };

        document.addEventListener('DOMContentLoaded', init_decryptor);
    })();
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Wed, 25 Mar 2015 17:20:00 +0800</pubDate><guid>tag:,2015-03-25:dear-diary/2015/What-do-you-really-want.html</guid><category>work</category></item><item><title>WIFI 热点欺骗</title><link>/hand-of-midas/2014/real-attack-show-wifi-vulnerability.html</link><description>&lt;p&gt;&lt;em&gt;很久以前看过一篇关于WIFI脆弱性的&lt;a href="http://fex.baidu.com/blog/2014/04/traffic-hijack/"&gt;介绍&lt;/a&gt;(找了好久终于被我找到了)，其中有一部分讲的是由于本身协议的弱点，相同 ssid 的热点会被合并为同一个，至于用户最终连接哪个热点取决于他所能接收到的信号强度。不知道此刻各位看官脑洞有没有大开？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;俗话说杀生不如宰熟，所以直接就向学校 ap 下手了。提前声明几个全局变量：&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ssid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NICESHOT&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt; &lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;简单部署&lt;/h3&gt;
&lt;h4&gt;用 hostapd 建立热点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;strong&gt;hostapd&lt;/strong&gt; is a user space daemon for access point and authentication servers. “&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install hostapd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更改配置文件 &lt;em&gt;/etc/hostapd-hotspot.conf&lt;/em&gt; 如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# WiFi Hotspot
interface=wlan0
driver=nl80211
#Access Point
ssid=NICESHOT
hw_mode=g
# WiFi Channel:
channel=1
#macaddr_acl=0
auth_algs=1
wmm_enabled=0
#ignore_broadcast_ssid=0
#wpa=3
#wpa_passphrase=1
#wpa_key_mgmt=WPA-PSK
#wpa_pairwise=TKIP
#rsn_pairwise=CCMP
ctrl_interface=/var/run/hostapd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可能还需要更改 &lt;em&gt;/etc/default/hostapd&lt;/em&gt; 为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DAEMON_CONF=/etc/hostapd/hostapd.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后测试配置文件&lt;code&gt;hostapd -d /etc/hostapd-hotspot.conf&lt;/code&gt;,  没有什么问题的话就可以启动服务了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service hostapd start
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;微型 DNCP &amp;amp; DNS -- dnsmasq&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Dnsmasq is a free software DNS forwarder and DHCP server for small networks. It is considered to be easily configured, with low system resource usage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dnsmasq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更改配置文件 &lt;em&gt;/etc/dnsmasq.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;log-facility=/var/log/dnsmasq.log
address=/#/192.168.1.1
interface=wlan0                                                                             
dhcp-range=192.168.1.20,192.168.1.254,12h
no-resolv 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后比较关键的是配置 &lt;strong&gt;wlan0&lt;/strong&gt; IP 地址 &lt;code&gt;ifconfig wlan0 192.168.1.1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;稍微总结一下，到此为止，我们做了这么些事情：创建 WFIFI 热点，监听 &lt;strong&gt;wlan0&lt;/strong&gt; 口，然后通过配置DHCP给所有连接到此 AP 的终端分配IP地址。另外上面的这条配置&lt;code&gt;address=/#/192.168.1.1&lt;/code&gt;，将所有地址解析到我们的电脑 IP。&lt;/p&gt;
&lt;h4&gt;搭建服务器&lt;/h4&gt;
&lt;p&gt;此处就不详说了，最终达到的效果是访问 &lt;code&gt;192.168.1.1&lt;/code&gt;是我们的钓鱼网站。&lt;/p&gt;
&lt;p&gt;因为校园网需要登陆，也就是说连接校园 AP 之后将所有 HTTP 页面跳转到网关登陆界面。所以我们也部署一个一模一样的登陆网关，然后所有连接的用户跟往常一样登陆网关，神不知鬼不觉得就把账号密码泄露过来了。稍后我会分享此处的简单代码 DEMO 到 GitHub。&lt;/p&gt;
&lt;h3&gt;进阶&lt;/h3&gt;
&lt;p&gt;当然不能停止在这么简陋的东西上面，我们需要更进一步。&lt;/p&gt;
&lt;h4&gt;粗暴的强制下线&lt;/h4&gt;
&lt;p&gt;毕竟我们只有一个无线网卡，用作 AP 之后就不能接入其他网络了，环境也不允许拉一根网线，用户登录网关之后根本没办法继续上网，很快你的伪 AP 就会被发现。所以我们强制所有登录网关，也就是被我们窃取密码的用户离线。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hostapd_cli deauthenticate 38:bc:1a:88:12:61                                                     
iptables -A INPUT -m mac --mac-source 38:bc:1a:88:12:61 -j DROP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一句强制用户离线，之前在配置 hostapd 的时，这句就是为了达到这个目的 &lt;code&gt;ctrl_interface=/var/run/hostapd&lt;/code&gt;，第二句将所有该设备的请求丢弃。这就是当一个人丧失所有利用价值之后的下场！&lt;/p&gt;
&lt;h4&gt;配置更为合理的 iptables（还没有实现）&lt;/h4&gt;
&lt;p&gt;当然，前提是我们自己的电脑还可以通过其他口，比如 &lt;em&gt;eth0&lt;/em&gt;，访问正常网络。&lt;/p&gt;
&lt;p&gt;通过配置合理强大的 &lt;strong&gt;iptables&lt;/strong&gt;,精心布局，我们不仅仅获取网关密码这么简单的并且还需要特别严格苛刻的场景的蛋糕。拭目以待。。。&lt;/p&gt;
&lt;h3&gt;思考&lt;/h3&gt;
&lt;h3&gt;后记&lt;/h3&gt;
&lt;h4&gt;伤敌一百，自损三千&lt;/h4&gt;
&lt;p&gt;因为自己的装备跟技术很挫，在配置之前那些东西的时候碰到了一些问题，险些出师未捷身先死。&lt;/p&gt;
&lt;p&gt;在 ubuntu 下，&lt;code&gt;service networking restart&lt;/code&gt;,然后你就各种问题爽翻天
- 现在，至少目前为止插上网线之后还需要 &lt;code&gt;ifup eth0&lt;/code&gt; 才能通过有线上网
- 现在，至少目前为止我连接 WIFI 的时候需要这么做（运气好的话差不多能连接上）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifup wlan0   #up the wlan port 
iwlist wlan0 scan #list availabel wifi ssid
iwconfig wlan0 essid &amp;quot;NICESHOT&amp;quot;  #no password
iwconfig wlan0 ssid &amp;quot;NICESHOT&amp;quot; key password   #with password
dhcpclient wlan0   #get ip via dhcp 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;电脑里面出现了奇怪的端口:wlan0:avahi&lt;/li&gt;
&lt;li&gt;系统自带的 network-manager 罢工了&lt;/li&gt;
&lt;li&gt;其他未知错误待续&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Sun, 23 Nov 2014 15:21:00 +0800</pubDate><guid>tag:,2014-11-23:hand-of-midas/2014/real-attack-show-wifi-vulnerability.html</guid><category>WIFI</category><category>Linux</category></item><item><title>建站续，附乱七八糟</title><link>/suo-sui/2014/build-and-remember-continued.html</link><description>&lt;p&gt;&lt;em&gt;逛了一圈论坛博客神马的发现好多人也都在写点东西纪念今天&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;距离上一次写东西已经很久了，主要原因是因为Air跪了！幸灾乐祸的主儿可以去看看&lt;a href="http://weibo.com/2356978633/B7CNpb52w?type=comment#_rnd1415671779372"&gt;原微&lt;/a&gt;，那可是目前自己微博上最火的一个&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="http://ww2.sinaimg.cn/large/8c7ca3c9jw1eh3fj6ouc4j21kw23u1kx.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;应该说这是之前那篇文章的续吧，可惜那篇的_Markdown_格式的已经弄没了，附上&lt;a href="nullne.com/archivi/abc.html"&gt;链接&lt;/a&gt;（估计也是唯一一个入口了）。当初心血来潮，也不完全心血来潮，算是小时候一个梦想吧，搞了这么一个极有技术含量的博客。现在看看当时还在初学者水平，只是简单的按照别人的教程做了下来。因为本儿跪了之后源代码也一并去了，所以一直都没有再更新，这一次重建博客，在之前的基础上新增加了很多东西，&lt;a href="https://travis-ci.org/"&gt;&lt;strong&gt;Travis&lt;/strong&gt;&lt;/a&gt;就是一个牛逼了的东西，待会儿我会接着把这一次的技术性细节一并简单介绍。&lt;/p&gt;
&lt;h3&gt;技术细节&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/"&gt;&lt;strong&gt;Travis CI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Travis CI is a hosted continuous integration service.
Travis CI's build environment provides different runtimes for different languages, for instance multiple versions of Ruby, PHP, Node.js. It also comes preinstalled with a variety of data stores and common tools like message brokers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;strong&gt;Pelican&lt;/strong&gt;的常规思路是在本地写好&lt;strong&gt;md&lt;/strong&gt;或者其他格式的文件，然后&lt;code&gt;make publish&lt;/code&gt;，当然这是集成命令，分解开就是先生成静态页面然后PUSH到&lt;strong&gt;Git page&lt;/strong&gt;。看着似乎很简单，这是建立在首先配置好你的本地环境的基础上，并且每次换一台机器之后你都需要重新配置你的环境。配环境这事儿我只能呵呵了，那么多的的平台配法儿都不太一样。&lt;/p&gt;
&lt;p&gt;但是，当你遇到&lt;strong&gt;Travis CI&lt;/strong&gt;一切就都不一样了。你只要一次性配置完成，将你的source文件PUSH到某一个github仓库。之后的事情就容易多了，按最坏的情况来说，你的本撒手人寰了（哭瞎），你写了一篇文章纪念。以最快的速度把舍友的本儿扯过来.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git://github.com/username/bri.github.io-source
$ mv remember.md path/to/content/
$ git add *
$ git commit -m &lt;span class="s2"&gt;&amp;quot;love you forever&amp;quot;&lt;/span&gt;
$ git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Done! 你的本儿在天之灵，看到以后应该就会安息了。&lt;/p&gt;
&lt;p&gt;废话不说了，按照&lt;a href="http://zonca.github.io"&gt;Zonca&lt;/a&gt;的&lt;a href="http://zonca.github.io/2013/09/automatically-build-pelican-and-publish-to-github-pages.html"&gt;教程&lt;/a&gt;一步一步下来基本没有错误，但是当时我走了很多弯路，自作聪明的改了一些脚本。如果遇到什么问题欢迎讨论。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tipue.com/"&gt;&lt;strong&gt;Tipue&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tipue Search is a site search engine jQuery plugin. It's free, open source and responsive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是跟上面一样，按照&lt;a href="http://moparx.com"&gt;Moparx&lt;/a&gt;的&lt;a href="http://moparx.com/2014/04/adding-search-capabilities-within-your-pelican-powered-site-using-tipue-search/"&gt;教程&lt;/a&gt;走吧。&lt;/p&gt;
&lt;p&gt;还有很多其他插件，像_Sitemap_什么的，之所以单独把这个列在这儿是因为发现原来静态页面也是可以交互的，它提供了一个思路。简单说就是将所有的网站页面存储到一个_JSON_文件，然后在搜索页面直接加载这个文件在本地搜索,非常快速。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Google Comments&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前用的是&lt;strong&gt;Disqus&lt;/strong&gt;,但是总感觉不是很舒服，这儿有一个简单的&lt;a href="http://browsingthenet.blogspot.com/2013/04/google-plus-comments-on-any-website.html"&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;都说是纪念了&lt;/h3&gt;
&lt;p&gt;高大上的&lt;em&gt;APEC&lt;/em&gt;假期马上就结束了，按照大四之前的性子，至少半个月前已经在他乡了，异国不敢说，但是已经开始筹划了，护照就是第一步。六天的假期在我这儿怎么也得有半个月。最近却怂怂的呆在学校哪儿也不敢去。&lt;/p&gt;
&lt;p&gt;反正就是没有找到工作。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;好的工作&lt;/em&gt;应该是什么样子的，我想了很多遍，从最开始投的第一家说起吧。&lt;/p&gt;
&lt;p&gt;阿里巴巴，以网上笔试结果&lt;strong&gt;诚信第一&lt;/strong&gt;终结了我。当时第一次参加网上笔试，幸灾乐祸的跟队友共同战斗以望能够从人海中脱颖而出。至于诚信什么的以后再说吧，大学之后关于这个的定义改变了很多。百度两次笔试无果，腾讯没有投递。BAT梦石沉大海，系统关照我有选择困难症。这之前我一直以为找份BAT的工作很容易，这之后我才去想一些事情。&lt;/p&gt;
&lt;p&gt;。。。。。。&lt;/p&gt;
&lt;p&gt;算了先就不无病呻吟了，刚才接到&lt;strong&gt;知道创宇&lt;/strong&gt;HR的电话，在这么一个特殊的节日去面试。&lt;/p&gt;
&lt;p&gt;最后附图纪念 &lt;strong&gt;&lt;em&gt;1111&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="https://lh5.googleusercontent.com/-foXL3QCuRco/VGDh3Wvvy8I/AAAAAAAAADg/iwtexzazuGg/s481/yule.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Tue, 11 Nov 2014 11:11:00 +0800</pubDate><guid>tag:,2014-11-11:suo-sui/2014/build-and-remember-continued.html</guid><category>找工作</category><category>blog</category></item><item><title>ARP protocol analysis</title><link>/hand-of-midas/2011/ARP-protocol.html</link><description>&lt;h1&gt;ARP 协议分析&lt;/h1&gt;
&lt;p&gt;@[arp|wireshark]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址解析协议&lt;/strong&gt;，即&lt;strong&gt;ARP&lt;/strong&gt;（Address Resolution Protocol） 是根据IP地址获取物理地址的一个TCP/IP协议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工作过程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议实战分析&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全威胁分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;工作流程&lt;/h3&gt;
&lt;p&gt;主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；
主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；
当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：
1. 根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。
2. 如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。
3. 主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。
4. 主机B将包含其MAC地址的ARP回复消息直接发送回主机A。
5. 当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了&lt;/p&gt;
&lt;h3&gt;协议实战分析&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;测试环境：windows
测试工具: cmd, wireshark&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;cmd&lt;/code&gt;中获取网关ip：10.3.17.1 &lt;img alt="Alt text" src="./QQ图片20141028221016.png" /&gt;&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;wireshap&lt;/code&gt;截取来自网关，即10.3.17.1的arp包，设置如下&lt;img alt="Alt text" src="./QQ图片20141028222301.png" /&gt;
获取到arp包后停止，见下图&lt;img alt="Alt text" src="./QQ图片20141028222312.jpg" /&gt;&lt;/li&gt;
&lt;li&gt;随机选择一个arp包（最后一个）进行分析&lt;img alt="Alt text" src="./QQ图片20141028222528.png" /&gt;&lt;/li&gt;
&lt;li&gt;arp包明确定义了Hardware type,Protocol type,Hardware size,Protocol size,Sender Mac  and IP address,Target Mac and IP address(从上面翻译后的内容可以清晰的看到)。&lt;/li&gt;
&lt;li&gt;ARP缓存会持续一段时间（一般为2分钟），之后又进行新一轮的更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;安全威胁分析&lt;/h3&gt;
&lt;p&gt;（因为模拟ARP攻击可能导致局域网内部出错，故此处只做理论分析）&lt;/p&gt;
&lt;h4&gt;ARP欺骗&lt;/h4&gt;
&lt;p&gt;ARP请求为广播形式发送的，网络上的主机可以自主发送ARP应答消息，并且当其他主机收到应答报文时不会检测该报文的真实性就将其记录在本地的MAC地址转换表，这样攻击者就可以向目标主机发送伪ARP应答报文，从而篡改本地的MAC地址表。 ARP欺骗可以导致目标计算机与网关通信失败，更会导致通信重定向，所有的数据都会通过攻击者的机器。
        最简单的攻击方式就是发送固定格式的ARP报文，类似于下面的格式：&lt;img alt="Alt text" src="./QQ图片20141028224008.png" /&gt;
已知被攻击者的ip以及mac地址（如果不知道可直接使用广播地址&lt;code&gt;FF.FF.FF.FF&lt;/code&gt;），将其自己的mac地址以及想截获的目标地址IP封装好发送，即能够刷新被欺骗主机的ARP缓存，从而得到本该发往另一个IP的所有包&lt;/p&gt;
&lt;h4&gt;ARP cache poisoning&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">nullne</dc:creator><pubDate>Mon, 05 Dec 2011 19:30:00 +0800</pubDate><guid>tag:,2011-11-03:hand-of-midas/2011/ARP-protocol.html</guid><category>Arp</category><category>wireshark</category></item></channel></rss>