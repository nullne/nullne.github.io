<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>NULLNE</title><link href="/" rel="alternate"></link><link href="/feeds/nullne.atom.xml" rel="self"></link><id>/</id><updated>2015-07-31T20:00:00+08:00</updated><entry><title>Golang</title><link href="/golang/2015/first-glance-at-go.html" rel="alternate"></link><updated>2015-07-31T20:00:00+08:00</updated><author><name>nullne</name></author><id>tag:,2015-07-31:golang/2015/first-glance-at-go.html</id><summary type="html">&lt;h2&gt;Go&lt;/h2&gt;
&lt;h3&gt;语法差异&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Variables and Constant&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;initial&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000000&lt;/span&gt;
    &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For Loop&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;// classic initial/condition/after for loop &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// most basic for loop&lt;/span&gt;
    &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// infinite loop&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;If/Else&lt;/li&gt;
&lt;li&gt;Switch&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;// use commas to separate multiple expression in the same case statement &lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Weekday&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Saturday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sunday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;it&amp;#39;s the weekend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;it&amp;#39;s a weekday&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// alternate way to implement If/Else while without an expression&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Hour&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;it&amp;#39;s before noon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;it&amp;#39;s after noon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Array, Slices, Maps&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Functions
    Do NOT support nested functions, function overload, function default parameter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;multiple return values
&lt;code&gt;go
func vals() (int, int) {
    return 3, 7
}
func main() {
    a, b = vals()
    _, b = vals()
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;variadic function&lt;br /&gt;
&lt;code&gt;go
func sum(nums ...int) {
    fmt.Printlf(nums)
}
func main() {
    sum(1, 2, 3)
    nums := []int{1, 2, 3, 4}
    sum(nums...)
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Clousure
    Go supports anonymous functions, which can form closures.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defer
    ```go
    package main&lt;/p&gt;
&lt;p&gt;import "fmt"&lt;/p&gt;
&lt;p&gt;func main() {
    defer fmt.Println("世界")
    fmt.Println('Hello')
}
&lt;code&gt;Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order.
    - Panic&lt;/code&gt;go
package main&lt;/p&gt;
&lt;p&gt;import "fmt"&lt;/p&gt;
&lt;p&gt;func test() {
    defer func() {
        if err := recover(); err != nil {
            fmt.Println(err.(string))
        }
    }()
    panic("panic errors")
}&lt;/p&gt;
&lt;p&gt;func main() {
    test()
}
```
    - Errors
- Pointers,  Structs,  Methods, Interface&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// _Interfaces_ are named collections of method&lt;/span&gt;
&lt;span class="c1"&gt;// signatures.&lt;/span&gt;

&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;math&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;// Here&amp;#39;s a basic interface for geometric shapes.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
    &lt;span class="nx"&gt;perim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// For our example we&amp;#39;ll implement this interface on&lt;/span&gt;
&lt;span class="c1"&gt;// `rect` and `circle` types.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// To implement an interface in Go, we just need to&lt;/span&gt;
&lt;span class="c1"&gt;// implement all the methods in the interface. Here we&lt;/span&gt;
&lt;span class="c1"&gt;// implement `geometry` on `rect`s.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;perim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The implementation for `circle`s.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;perim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// If a variable has an interface type, then we can call&lt;/span&gt;
&lt;span class="c1"&gt;// methods that are in the named interface. Here&amp;#39;s a&lt;/span&gt;
&lt;span class="c1"&gt;// generic `measure` function taking advantage of this&lt;/span&gt;
&lt;span class="c1"&gt;// to work on any `geometry`.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;measure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;perim&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// The `circle` and `rect` struct types both&lt;/span&gt;
    &lt;span class="c1"&gt;// implement the `geometry` interface so we can use&lt;/span&gt;
    &lt;span class="c1"&gt;// instances of&lt;/span&gt;
    &lt;span class="c1"&gt;// these structs as arguments to `measure`.&lt;/span&gt;
    &lt;span class="nx"&gt;measure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;measure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Reflect&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;多线程处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Goroutines
  A goroutine is a lightweight thread of execution.
  ```go&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;package main
  import "fmt"&lt;/p&gt;
&lt;p&gt;func f(from string) {
        for i := 0; i &amp;lt; 3; i++ {
            fmt.Println(from, ":", i)
  } 
  func main() {
      go f("args")
      go func(msg string) {
          fmt.Println(msg)
      }("going")
    var input string
    fmt.Scanln(&amp;amp;input)
    fmt.Println("done")
  }
  ```
- Channels&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Channels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine.
```go
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;package main
import "fmt"
func main() {
    messages := make(chan string)
    go func() { messages &amp;lt;- "ping" }()
    msg := &amp;lt;-messages
    fmt.Println(msg)
}
    ```&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; Channel Buffering
&lt;span class="sb"&gt;` messages := make(chan string, 2)`&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; Channel Direction
&lt;span class="sb"&gt;`func pong(pings &amp;lt;-chan string, pongs chan&amp;lt;- string) {}`&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; Closing Channel
&lt;span class="sb"&gt;`close(channel)`&lt;/span&gt;
Closing channel means there is no more values to be sent &lt;span class="p"&gt;,&lt;/span&gt; it is possible to close a non&lt;span class="o"&gt;-&lt;/span&gt;empty channel
&lt;span class="o"&gt;-&lt;/span&gt; Range over channels
    Range can not only provide iteration over basic data &lt;span class="kp"&gt;structure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; but also iterate over values received from a channel.

    &lt;span class="sb"&gt;``&lt;/span&gt;`go
    queue &lt;span class="o"&gt;:=&lt;/span&gt; make&lt;span class="p"&gt;(&lt;/span&gt;chan string&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    queue &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;
    queue &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;
    &lt;span class="kp"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;queue&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;for&lt;/span&gt; elem &lt;span class="o"&gt;:=&lt;/span&gt; range queue &lt;span class="p"&gt;{&lt;/span&gt;
        fmt.Println&lt;span class="p"&gt;(&lt;/span&gt;elem&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sb"&gt;``&lt;/span&gt;`
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Select&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Go&amp;#39;s _select_ lets you wait on multiple channel&lt;/span&gt;
&lt;span class="c1"&gt;// operations. Combining goroutines and channels with&lt;/span&gt;
&lt;span class="c1"&gt;// select is a powerful feature of Go.&lt;/span&gt;

&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// For our example we&amp;#39;ll select across two channels.&lt;/span&gt;
    &lt;span class="nx"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Each channel will receive a value after some amount&lt;/span&gt;
    &lt;span class="c1"&gt;// of time, to simulate e.g. blocking RPC operations&lt;/span&gt;
    &lt;span class="c1"&gt;// executing in concurrent goroutines.&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="c1"&gt;// We&amp;#39;ll use `select` to await both of these values&lt;/span&gt;
    &lt;span class="c1"&gt;// simultaneously, printing each one as it arrives.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;msg1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;received&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;msg2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;received&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;包管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go 语言中 &lt;code&gt;import&lt;/code&gt; 语句使用绝对路径的方式引入安装到本地的包。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;go get&lt;/code&gt; 命令安装远程仓库中托管的包&lt;/li&gt;
&lt;li&gt;Go 语言还提供了一个 Workspace 的机制。通过设定 GOPATH环境变量，指定除了GOROOT所指定的目录之外，Go 代码所在的位置 (也就是 Workspace 的位置)。 一般来说，GOPATH目录下会包含pkg、src和bin三个子目录，这三个目录各有用处。&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bin&lt;/strong&gt; 目录用来放置编译好的可执行文件，为了使得这里的可执行文件可以方便的运行， 在 shell 中设置PATH变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pkg&lt;/strong&gt; 目录用来放置代码源文件，在进行import时，是使用这个位置作为根目录的。自己编写的代码也应该放在这下面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;src&lt;/strong&gt; 用来放置安装的包的链接对象 (Object) 的。这个概念有点类似于链接库，Go 会将编译出的可连接库放在这里， 方便编译时链接。不同的系统和处理器架构的对象会在pkg存放在不同的文件夹中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;├── bin
│   └── hello
├── pkg
│   └── darwin_amd64
│       └── github.com
│           └── user
│               └── stringutil.a
└── src
    └── github.com
        └── user
            ├── hello
            │   ├── hello
            │   └── hello.go
            └── stringutil
                └── reverse.go
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;进阶&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory Allocator&lt;/li&gt;
&lt;li&gt;Garbage Collector&lt;/li&gt;
&lt;li&gt;Goroutine Scheduler&lt;/li&gt;
&lt;li&gt;Channel&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;参考资料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tour.golang.org/welcome/1"&gt;A Tour of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gobyexample.com"&gt;Go By Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://golang.org/doc/code.html#PackageNames"&gt;How to Write Go Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/p/go-fundamental-programming"&gt;go 编程基础（视频）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nullne/book/blob/master/Go%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20%E7%AC%AC%E5%9B%9B%E7%89%88.pdf"&gt;Go学习笔记 -- 雨痕&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://io-meter.com/2014/07/30/go's-package-management/"&gt;Go 语言的包依赖管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Programming"></category><category term="Tutorial"></category></entry><entry><title>你到底想要一个什么的工作</title><link href="/suo-sui/2015/What-do-you-really-want.html" rel="alternate"></link><updated>2015-03-25T17:20:00+08:00</updated><author><name>nullne</name></author><id>tag:,2015-03-25:suo-sui/2015/What-do-you-really-want.html</id><summary type="html">&lt;p&gt;每次都不知道怎么开头。。
来了CC两个多礼拜吧，什么事情也没有做其实，无非是每天看看文档，帮头儿做下技术调研。刚才机器挂掉了，所以顺便出来坐坐&lt;/p&gt;
&lt;p&gt;一般终面的时候面试官都会问你一个问题，你理想中的公司或者工作是什么样子的？是个好问题，但是当时却不一定能够回答得好。
现在正是个好时机想想这个问题。&lt;/p&gt;
&lt;p&gt;首先，理想中的工作一定不是每天10+个小时对着电脑，要么做一些用脚后跟都能处理的事情，要么就是四指来回滑动切换画面无聊度日。现在遇到的技术性问题大多都可以通过 Google 解决，并且问题深度不够。技术方面的成长纯粹通过点滴积累得到的。这种工作没有个性而言，换做谁做都不会有什么变化。再者评价一个人能力纯粹根据他掌握的知识判断，自身的能力其实差别并不是很重要。说的再明白一点，丰富的技术经历技术积累一定会使你成为某一个领域的大牛，至少大多数人看来如此。但这并不妨碍一些人（往往他们比较挑剔并且很有品味)看不起你。&lt;br /&gt;
这就是我说的第二点。你的工作还需要灵魂的提高。大多数同行业的人对码农的评价基本上都是技术牛，没品位，能赚钱，不会花。其实我说的并不是很到位，甚至只是个人片面看法。我没有接触过更厉害的码农，这也是导致我的思维狭隘的一个原因。一个人的工作如果能让他变得不同于其他人，那么这份工作就是我的这个层次上的需求。随之而来的问题就是人是群居动物，如果你明显的鹤立鸡群的话你也许会越来越孤独。当然这又是另一个话题了。
再有一个无关于工作的因素，一个人的烦恼大部分因为理想远高于能力。恰恰这个东西又是非常不容易评判的。有一个词叫做潜力，当你明明知道自己的能力达不到自己的梦想的时候就会用这个词来搪塞，而且效果奇佳。人很难看清楚自己，别人容易看清楚自己是因为他们对你漠不关心！  &lt;/p&gt;
&lt;p&gt;好了，是时候描述一下我心目中理想的工作是什么样子了。
一间很有味道的屋子，跟一些完全不是一个成长体系（说人话，专业迥异）的人共同做一件有意思的事情。这个事情没有必要描述的很清楚，总之是在做一件有意思的事情。
好吧我说不出来了，我想自己的思维已经被禁锢了，被和我一样想法的人禁锢了。因为我想要的生活一定是由一群苦逼的人们撑起来的。&lt;/p&gt;
&lt;p&gt;每次写东西都不尽兴，写的不知所云。我也不知道美好的生活什么样子的，我只知道我周围的人没有一个过着我的生活。&lt;/p&gt;
&lt;p&gt;&lt;img alt="enter image description here" src="http://ww2.sinaimg.cn/mw1024/8c7ca3c9jw1eqg02wp7q0j21jk15on6e.jpg" /&gt;&lt;/p&gt;</summary><category term="work"></category></entry><entry><title>WIFI 热点欺骗</title><link href="/web/2014/real-attack-show-wifi-vulnerability.html" rel="alternate"></link><updated>2014-11-23T15:21:00+08:00</updated><author><name>nullne</name></author><id>tag:,2014-11-23:web/2014/real-attack-show-wifi-vulnerability.html</id><summary type="html">&lt;p&gt;&lt;em&gt;很久以前看过一篇关于WIFI脆弱性的&lt;a href="http://fex.baidu.com/blog/2014/04/traffic-hijack/"&gt;介绍&lt;/a&gt;(找了好久终于被我找到了)，其中有一部分讲的是由于本身协议的弱点，相同 ssid 的热点会被合并为同一个，至于用户最终连接哪个热点取决于他所能接收到的信号强度。不知道此刻各位看官脑洞有没有大开？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;俗话说杀生不如宰熟，所以直接就向学校 ap 下手了。提前声明几个全局变量：&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NICESHOT&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt; &lt;span class="n"&gt;ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;简单部署&lt;/h3&gt;
&lt;h4&gt;用 hostapd 建立热点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;strong&gt;hostapd&lt;/strong&gt; is a user space daemon for access point and authentication servers. “&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install hostapd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更改配置文件 &lt;em&gt;/etc/hostapd-hotspot.conf&lt;/em&gt; 如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# WiFi Hotspot
interface=wlan0
driver=nl80211
#Access Point
ssid=NICESHOT
hw_mode=g
# WiFi Channel:
channel=1
#macaddr_acl=0
auth_algs=1
wmm_enabled=0
#ignore_broadcast_ssid=0
#wpa=3
#wpa_passphrase=1
#wpa_key_mgmt=WPA-PSK
#wpa_pairwise=TKIP
#rsn_pairwise=CCMP
ctrl_interface=/var/run/hostapd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可能还需要更改 &lt;em&gt;/etc/default/hostapd&lt;/em&gt; 为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DAEMON_CONF=/etc/hostapd/hostapd.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后测试配置文件&lt;code&gt;hostapd -d /etc/hostapd-hotspot.conf&lt;/code&gt;,  没有什么问题的话就可以启动服务了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service hostapd start
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;微型 DNCP &amp;amp; DNS -- dnsmasq&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Dnsmasq is a free software DNS forwarder and DHCP server for small networks. It is considered to be easily configured, with low system resource usage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install dnsmasq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更改配置文件 &lt;em&gt;/etc/dnsmasq.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;log-facility=/var/log/dnsmasq.log
address=/#/192.168.1.1
interface=wlan0                                                                             
dhcp-range=192.168.1.20,192.168.1.254,12h
no-resolv 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后比较关键的是配置 &lt;strong&gt;wlan0&lt;/strong&gt; IP 地址 &lt;code&gt;ifconfig wlan0 192.168.1.1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;稍微总结一下，到此为止，我们做了这么些事情：创建 WFIFI 热点，监听 &lt;strong&gt;wlan0&lt;/strong&gt; 口，然后通过配置DHCP给所有连接到此 AP 的终端分配IP地址。另外上面的这条配置&lt;code&gt;address=/#/192.168.1.1&lt;/code&gt;，将所有地址解析到我们的电脑 IP。&lt;/p&gt;
&lt;h4&gt;搭建服务器&lt;/h4&gt;
&lt;p&gt;此处就不详说了，最终达到的效果是访问 &lt;code&gt;192.168.1.1&lt;/code&gt;是我们的钓鱼网站。&lt;/p&gt;
&lt;p&gt;因为校园网需要登陆，也就是说连接校园 AP 之后将所有 HTTP 页面跳转到网关登陆界面。所以我们也部署一个一模一样的登陆网关，然后所有连接的用户跟往常一样登陆网关，神不知鬼不觉得就把账号密码泄露过来了。稍后我会分享此处的简单代码 DEMO 到 GitHub。&lt;/p&gt;
&lt;h3&gt;进阶&lt;/h3&gt;
&lt;p&gt;当然不能停止在这么简陋的东西上面，我们需要更进一步。&lt;/p&gt;
&lt;h4&gt;粗暴的强制下线&lt;/h4&gt;
&lt;p&gt;毕竟我们只有一个无线网卡，用作 AP 之后就不能接入其他网络了，环境也不允许拉一根网线，用户登录网关之后根本没办法继续上网，很快你的伪 AP 就会被发现。所以我们强制所有登录网关，也就是被我们窃取密码的用户离线。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hostapd_cli deauthenticate 38:bc:1a:88:12:61                                                     
iptables -A INPUT -m mac --mac-source 38:bc:1a:88:12:61 -j DROP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一句强制用户离线，之前在配置 hostapd 的时，这句就是为了达到这个目的 &lt;code&gt;ctrl_interface=/var/run/hostapd&lt;/code&gt;，第二句将所有该设备的请求丢弃。这就是当一个人丧失所有利用价值之后的下场！&lt;/p&gt;
&lt;h4&gt;配置更为合理的 iptables（还没有实现）&lt;/h4&gt;
&lt;p&gt;当然，前提是我们自己的电脑还可以通过其他口，比如 &lt;em&gt;eth0&lt;/em&gt;，访问正常网络。&lt;/p&gt;
&lt;p&gt;通过配置合理强大的 &lt;strong&gt;iptables&lt;/strong&gt;,精心布局，我们不仅仅获取网关密码这么简单的并且还需要特别严格苛刻的场景的蛋糕。拭目以待。。。&lt;/p&gt;
&lt;h3&gt;思考&lt;/h3&gt;
&lt;h3&gt;后记&lt;/h3&gt;
&lt;h4&gt;伤敌一百，自损三千&lt;/h4&gt;
&lt;p&gt;因为自己的装备跟技术很挫，在配置之前那些东西的时候碰到了一些问题，险些出师未捷身先死。&lt;/p&gt;
&lt;p&gt;在 ubuntu 下，&lt;code&gt;service networking restart&lt;/code&gt;,然后你就各种问题爽翻天
- 现在，至少目前为止插上网线之后还需要 &lt;code&gt;ifup eth0&lt;/code&gt; 才能通过有线上网
- 现在，至少目前为止我连接 WIFI 的时候需要这么做（运气好的话差不多能连接上）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ifup wlan0   #up the wlan port 
iwlist wlan0 scan #list availabel wifi ssid
iwconfig wlan0 essid &amp;quot;NICESHOT&amp;quot;  #no password
iwconfig wlan0 ssid &amp;quot;NICESHOT&amp;quot; key password   #with password
dhcpclient wlan0   #get ip via dhcp 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;电脑里面出现了奇怪的端口:wlan0:avahi&lt;/li&gt;
&lt;li&gt;系统自带的 network-manager 罢工了&lt;/li&gt;
&lt;li&gt;其他未知错误待续&lt;/li&gt;
&lt;/ul&gt;</summary><category term="WIFI"></category><category term="Linux"></category></entry><entry><title>建站续，附乱七八糟</title><link href="/suo-sui/2014/build-and-remember-continued.html" rel="alternate"></link><updated>2014-11-11T11:11:00+08:00</updated><author><name>nullne</name></author><id>tag:,2014-11-11:suo-sui/2014/build-and-remember-continued.html</id><summary type="html">&lt;p&gt;&lt;em&gt;逛了一圈论坛博客神马的发现好多人也都在写点东西纪念今天&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;距离上一次写东西已经很久了，主要原因是因为Air跪了！幸灾乐祸的主儿可以去看看&lt;a href="http://weibo.com/2356978633/B7CNpb52w?type=comment#_rnd1415671779372"&gt;原微&lt;/a&gt;，那可是目前自己微博上最火的一个&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="http://ww2.sinaimg.cn/large/8c7ca3c9jw1eh3fj6ouc4j21kw23u1kx.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;应该说这是之前那篇文章的续吧，可惜那篇的_Markdown_格式的已经弄没了，附上&lt;a href="nullne.com/archivi/abc.html"&gt;链接&lt;/a&gt;（估计也是唯一一个入口了）。当初心血来潮，也不完全心血来潮，算是小时候一个梦想吧，搞了这么一个极有技术含量的博客。现在看看当时还在初学者水平，只是简单的按照别人的教程做了下来。因为本儿跪了之后源代码也一并去了，所以一直都没有再更新，这一次重建博客，在之前的基础上新增加了很多东西，&lt;a href="https://travis-ci.org/"&gt;&lt;strong&gt;Travis&lt;/strong&gt;&lt;/a&gt;就是一个牛逼了的东西，待会儿我会接着把这一次的技术性细节一并简单介绍。&lt;/p&gt;
&lt;h3&gt;技术细节&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/"&gt;&lt;strong&gt;Travis CI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Travis CI is a hosted continuous integration service.
Travis CI's build environment provides different runtimes for different languages, for instance multiple versions of Ruby, PHP, Node.js. It also comes preinstalled with a variety of data stores and common tools like message brokers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;strong&gt;Pelican&lt;/strong&gt;的常规思路是在本地写好&lt;strong&gt;md&lt;/strong&gt;或者其他格式的文件，然后&lt;code&gt;make publish&lt;/code&gt;，当然这是集成命令，分解开就是先生成静态页面然后PUSH到&lt;strong&gt;Git page&lt;/strong&gt;。看着似乎很简单，这是建立在首先配置好你的本地环境的基础上，并且每次换一台机器之后你都需要重新配置你的环境。配环境这事儿我只能呵呵了，那么多的的平台配法儿都不太一样。&lt;/p&gt;
&lt;p&gt;但是，当你遇到&lt;strong&gt;Travis CI&lt;/strong&gt;一切就都不一样了。你只要一次性配置完成，将你的source文件PUSH到某一个github仓库。之后的事情就容易多了，按最坏的情况来说，你的本撒手人寰了（哭瞎），你写了一篇文章纪念。以最快的速度把舍友的本儿扯过来.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git://github.com/username/bri.github.io-source
mv remember.md path/to/content/
git add *
git commit -m &lt;span class="s2"&gt;&amp;quot;love you forever&amp;quot;&lt;/span&gt;
git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Done! 你的本儿在天之灵，看到以后应该就会安息了。&lt;/p&gt;
&lt;p&gt;废话不说了，按照&lt;a href="http://zonca.github.io"&gt;Zonca&lt;/a&gt;的&lt;a href="http://zonca.github.io/2013/09/automatically-build-pelican-and-publish-to-github-pages.html"&gt;教程&lt;/a&gt;一步一步下来基本没有错误，但是当时我走了很多弯路，自作聪明的改了一些脚本。如果遇到什么问题欢迎讨论。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tipue.com/"&gt;&lt;strong&gt;Tipue&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tipue Search is a site search engine jQuery plugin. It's free, open source and responsive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是跟上面一样，按照&lt;a href="http://moparx.com"&gt;Moparx&lt;/a&gt;的&lt;a href="http://moparx.com/2014/04/adding-search-capabilities-within-your-pelican-powered-site-using-tipue-search/"&gt;教程&lt;/a&gt;走吧。&lt;/p&gt;
&lt;p&gt;还有很多其他插件，像_Sitemap_什么的，之所以单独把这个列在这儿是因为发现原来静态页面也是可以交互的，它提供了一个思路。简单说就是将所有的网站页面存储到一个_JSON_文件，然后在搜索页面直接加载这个文件在本地搜索,非常快速。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Google Comments&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前用的是&lt;strong&gt;Disqus&lt;/strong&gt;,但是总感觉不是很舒服，这儿有一个简单的&lt;a href="http://browsingthenet.blogspot.com/2013/04/google-plus-comments-on-any-website.html"&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;都说是纪念了&lt;/h3&gt;
&lt;p&gt;高大上的&lt;em&gt;APEC&lt;/em&gt;假期马上就结束了，按照大四之前的性子，至少半个月前已经在他乡了，异国不敢说，但是已经开始筹划了，护照就是第一步。六天的假期在我这儿怎么也得有半个月。最近却怂怂的呆在学校哪儿也不敢去。&lt;/p&gt;
&lt;p&gt;反正就是没有找到工作。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;好的工作&lt;/em&gt;应该是什么样子的，我想了很多遍，从最开始投的第一家说起吧。&lt;/p&gt;
&lt;p&gt;阿里巴巴，以网上笔试结果&lt;strong&gt;诚信第一&lt;/strong&gt;终结了我。当时第一次参加网上笔试，幸灾乐祸的跟队友共同战斗以望能够从人海中脱颖而出。至于诚信什么的以后再说吧，大学之后关于这个的定义改变了很多。百度两次笔试无果，腾讯没有投递。BAT梦石沉大海，系统关照我有选择困难症。这之前我一直以为找份BAT的工作很容易，这之后我才去想一些事情。&lt;/p&gt;
&lt;p&gt;。。。。。。&lt;/p&gt;
&lt;p&gt;算了先就不无病呻吟了，刚才接到&lt;strong&gt;知道创宇&lt;/strong&gt;HR的电话，在这么一个特殊的节日去面试。&lt;/p&gt;
&lt;p&gt;最后附图纪念 &lt;strong&gt;&lt;em&gt;1111&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="https://lh5.googleusercontent.com/-foXL3QCuRco/VGDh3Wvvy8I/AAAAAAAAADg/iwtexzazuGg/s481/yule.jpg" /&gt;&lt;/p&gt;</summary><category term="找工作"></category><category term="blog"></category></entry><entry><title>ARP protocol analysis</title><link href="/web/2011/ARP-protocol.html" rel="alternate"></link><updated>2011-12-05T19:30:00+08:00</updated><author><name>nullne</name></author><id>tag:,2011-11-03:web/2011/ARP-protocol.html</id><summary type="html">&lt;h1&gt;ARP 协议分析&lt;/h1&gt;
&lt;p&gt;@[arp|wireshark]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址解析协议&lt;/strong&gt;，即&lt;strong&gt;ARP&lt;/strong&gt;（Address Resolution Protocol） 是根据IP地址获取物理地址的一个TCP/IP协议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工作过程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议实战分析&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全威胁分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;工作流程&lt;/h3&gt;
&lt;p&gt;主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；
主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；
当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：
1. 根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。
2. 如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。
3. 主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。
4. 主机B将包含其MAC地址的ARP回复消息直接发送回主机A。
5. 当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了&lt;/p&gt;
&lt;h3&gt;协议实战分析&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;测试环境：windows
测试工具: cmd, wireshark&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;cmd&lt;/code&gt;中获取网关ip：10.3.17.1 &lt;img alt="Alt text" src="./QQ图片20141028221016.png" /&gt;&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;wireshap&lt;/code&gt;截取来自网关，即10.3.17.1的arp包，设置如下&lt;img alt="Alt text" src="./QQ图片20141028222301.png" /&gt;
获取到arp包后停止，见下图&lt;img alt="Alt text" src="./QQ图片20141028222312.jpg" /&gt;&lt;/li&gt;
&lt;li&gt;随机选择一个arp包（最后一个）进行分析&lt;img alt="Alt text" src="./QQ图片20141028222528.png" /&gt;&lt;/li&gt;
&lt;li&gt;arp包明确定义了Hardware type,Protocol type,Hardware size,Protocol size,Sender Mac  and IP address,Target Mac and IP address(从上面翻译后的内容可以清晰的看到)。&lt;/li&gt;
&lt;li&gt;ARP缓存会持续一段时间（一般为2分钟），之后又进行新一轮的更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;安全威胁分析&lt;/h3&gt;
&lt;p&gt;（因为模拟ARP攻击可能导致局域网内部出错，故此处只做理论分析）&lt;/p&gt;
&lt;h4&gt;ARP欺骗&lt;/h4&gt;
&lt;p&gt;ARP请求为广播形式发送的，网络上的主机可以自主发送ARP应答消息，并且当其他主机收到应答报文时不会检测该报文的真实性就将其记录在本地的MAC地址转换表，这样攻击者就可以向目标主机发送伪ARP应答报文，从而篡改本地的MAC地址表。 ARP欺骗可以导致目标计算机与网关通信失败，更会导致通信重定向，所有的数据都会通过攻击者的机器。
        最简单的攻击方式就是发送固定格式的ARP报文，类似于下面的格式：&lt;img alt="Alt text" src="./QQ图片20141028224008.png" /&gt;
已知被攻击者的ip以及mac地址（如果不知道可直接使用广播地址&lt;code&gt;FF.FF.FF.FF&lt;/code&gt;），将其自己的mac地址以及想截获的目标地址IP封装好发送，即能够刷新被欺骗主机的ARP缓存，从而得到本该发往另一个IP的所有包&lt;/p&gt;
&lt;h4&gt;ARP cache poisoning&lt;/h4&gt;</summary><category term="Arp"></category><category term="wireshark"></category></entry></feed>